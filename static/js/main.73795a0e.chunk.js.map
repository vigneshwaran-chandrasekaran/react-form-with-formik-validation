{"version":3,"sources":["components/Error.js","components/FormTwo.js","serviceWorker.js","index.js","App.js"],"names":["Error","touched","message","className","validationSchema","Yup","shape","userName","min","max","required","email","FormTwo","initialValues","values","errors","handleChange","handleBlur","htmlFor","type","id","name","placeholder","value","onBlur","onChange","JSON","stringify","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mSAEe,SAASA,EAAT,GAAsC,IAArBC,EAAoB,EAApBA,QAASC,EAAW,EAAXA,QACrC,OAAKD,EAGDC,EACO,yBAAKC,UAAU,eAAeD,EAA9B,iBAEJ,yBAAKC,UAAU,gBAAf,yBALI,qCCCf,IAAMC,EAAmBC,WAAaC,MAAM,CACxCC,SAAUF,WACLG,IAAI,GACJC,IAAI,IACJC,WACLC,MAAON,WACFM,QACAH,IAAI,GACJC,IAAI,IACJC,aAGM,SAASE,IACpB,OACI,yBAAKT,UAAU,aACX,yBAAKA,UAAU,0CACX,yBAAKA,UAAU,UACf,yBAAKA,UAAU,SACX,kBAAC,IAAD,CACIU,cAAe,CACXF,MAAO,GACPJ,SAAU,IAEdH,iBAAkBA,IAEjB,gBAAGU,EAAH,EAAGA,OAAQC,EAAX,EAAWA,OAAQd,EAAnB,EAAmBA,QAASe,EAA5B,EAA4BA,aAAcC,EAA1C,EAA0CA,WAA1C,OACG,8BACI,yBAAKd,UAAU,cACX,2BAAOe,QAAQ,SAAf,kBACA,kBAAC,IAAD,CACIC,KAAK,QACLhB,UAAW,iBAAmBF,EAAQU,OAASI,EAAOJ,MAAQ,gBAAkB,IAChFS,GAAG,QACHC,KAAK,QACLC,YAAY,mBACZC,MAAOT,EAAOH,MACda,OAAQP,EACRQ,SAAUT,IAEd,kBAAChB,EAAD,CAAOC,QAASA,EAAQU,MAAOT,QAASa,EAAOJ,SAEnD,yBAAKR,UAAU,cACX,2BAAOe,QAAQ,YAAf,QACA,2BACIC,KAAK,OACLhB,UAAW,iBAAmBF,EAAQM,UAAYQ,EAAOR,SAAW,gBAAkB,IACtFa,GAAG,WACHC,KAAK,WACLC,YAAY,kBACZC,MAAOT,EAAOP,SACdiB,OAAQP,EACRQ,SAAUT,IAEd,kBAAChB,EAAD,CAAOC,QAASA,EAAQM,SAAUL,QAASa,EAAOR,YAEtD,6BACI,4BAAQY,KAAK,SAAShB,UAAU,mBAAhC,WAEHuB,KAAKC,UAAUb,QAKhC,yBAAKX,UAAU,YCxDXyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBCFD,WACb,OACE,6BAEE,kBAACtB,EAAD,SDFU,MAASuB,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.73795a0e.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function Error({ touched, message }) {\n    if (!touched) {\n        return <div>&nbsp;</div>;\n    }\n    if (message) {\n        return <div className='text-danger'>{message} ðŸ˜Ÿ</div>;\n    }\n    return <div className='text-success'>all good ðŸ˜ƒ</div>;\n}\n","import React from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport Error from './Error';\n\nconst validationSchema = Yup.object().shape({\n    userName: Yup.string()\n        .min(1)\n        .max(15)\n        .required(),\n    email: Yup.string()\n        .email()\n        .min(1)\n        .max(15)\n        .required()\n});\n\nexport default function FormTwo() {\n    return (\n        <div className=\"container\">\n            <div className='d-flex flex-row justify-content-center'>\n                <div className='col-2'></div>\n                <div className='col-6'>\n                    <Formik\n                        initialValues={{\n                            email: '',\n                            userName: ''\n                        }}\n                        validationSchema={validationSchema}\n                    >\n                        {({ values, errors, touched, handleChange, handleBlur }) => (\n                            <form>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"email\">Email address:</label>\n                                    <Field\n                                        type=\"email\"\n                                        className={\"form-control \" + (touched.email && errors.email ? 'border-danger' : '')}\n                                        id=\"email\"\n                                        name=\"email\"\n                                        placeholder='Enter your email'\n                                        value={values.email}\n                                        onBlur={handleBlur}\n                                        onChange={handleChange}\n                                    />\n                                    <Error touched={touched.email} message={errors.email} />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor='userName'>Name</label>\n                                    <input\n                                        type='text'\n                                        className={\"form-control \" + (touched.userName && errors.userName ? 'border-danger' : '')}\n                                        id='userName'\n                                        name='userName'\n                                        placeholder='Enter your name'\n                                        value={values.userName}\n                                        onBlur={handleBlur}\n                                        onChange={handleChange}\n                                    />\n                                    <Error touched={touched.userName} message={errors.userName} />\n                                </div>\n                                <div>\n                                    <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\n                                </div>\n                                {JSON.stringify(values)}\n                            </form>\n                        )}\n                    </Formik>\n                </div>\n                <div className='col-2'></div>\n            </div>\n        </div>\n    )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\n// import FormOne from './components/FormOne';\nimport FormTwo from './components/FormTwo';\n\nexport default function App() {\n  return (\n    <div>\n      {/* <FormOne email='hello' /> */}\n      <FormTwo />\n    </div>\n  )\n}"],"sourceRoot":""}