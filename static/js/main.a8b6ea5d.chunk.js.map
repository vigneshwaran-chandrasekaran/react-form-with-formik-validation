{"version":3,"sources":["components/Debug.js","components/Line.js","components/Arrays.js","components/AsyncSubmit.js","components/AsyncValidation.js","components/Basic.js","components/Checkbox.js","components/CombinedValidations.js","components/CustomInputs.js","components/ErrorMessage.js","components/FastField.js","components/FastFieldWebExample.js","components/FieldLevelValidation.js","components/MultistepWizard.js","components/SchemaValidation.js","components/SyncValidation.js","components/FormOne.js","components/Error.js","components/FormTwo.js","components/FormThree.js","serviceWorker.js","index.js","App.js"],"names":["Debug","style","margin","borderRadius","background","boxShadow","textTransform","fontSize","borderTopLeftRadius","borderTopRightRadius","fontWeight","padding","color","letterSpacing","validationSchema","validate","onSubmit","rest","overflowX","JSON","stringify","Line","initialValues","friends","name","email","FriendArrayErrors","errors","className","Yup","message","mapper","a","this","test","list","length","Set","map","size","shape","of","min","required","unique","Arrays","values","setTimeout","alert","render","touched","isSubmitting","insert","remove","push","friend","index","key","htmlFor","placeholder","type","component","onClick","sleep","ms","Promise","resolve","AsyncSubmit","firstName","lastName","disabled","then","res","console","log","includes","username","Object","keys","handleOnSubmit","setSubmitting","resetForm","Username","handleReset","Basic","CheckboxExample","isAwesome","terms","newsletter","jobType","location","handleChange","getFieldProps","handleBlur","value","onChange","onBlur","id","Schema","zip","isRequired","undefined","FieldLevelValidation","setFieldValue","setFieldTouched","validateField","validateForm","Fieldset","label","Fragment","animal","website","url","animalsList","Options","options","option","CustomInputs","onSubmitHandle","SignUpSchema","max","SignUp","msg","Input","renders","props","React","Component","field","middleInitial","form","submitCount","Wizard","next","setState","state","page","Math","children","previous","activePage","Children","toArray","handleSubmit","bag","count","setTouched","isLastPage","enableReinitialize","Page","App","favoriteColor","actions","window","SignIn","password","FormSchema","plan","FormOneFormik","withFormik","mapPropsToValues","setErrors","checked","Error","role","aria-label","userName","country","FormTwo","useState","setCountry","suggestions","setSuggestions","onSuggestionsClearRequested","inputProps","autoComplete","_event","newValue","onSuggestionsFetchRequested","axios","get","result","data","row","flag","getSuggestionValue","suggestion","renderSuggestion","width","paddingRight","src","alt","onSuggestionSelected","event","suggestionValue","suggestionIndex","sectionIndex","method","preventDefault","FormThree","Boolean","hostname","match","ReactDOM","AsyncValidation","Checkbox","CombinedValidations","ErrorMessage","FastField","FastFieldWebExample","MultistepWizard","SchemaValidation","SyncValidation","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a8b6ea5d.chunk.js","sourcesContent":["import React from 'react';\nimport { FormikConsumer } from 'formik';\n\nexport const Debug = () => (\n  <div\n    style={{\n      margin: '3rem 0',\n      borderRadius: 4,\n      background: '#f6f8fa',\n\n      boxShadow: '0 0 1px  #eee inset',\n    }}\n  >\n    <div\n      style={{\n        textTransform: 'uppercase',\n        fontSize: 11,\n        borderTopLeftRadius: 4,\n        borderTopRightRadius: 4,\n        fontWeight: 500,\n        padding: '.5rem',\n        background: '#555',\n        color: '#fff',\n        letterSpacing: '1px',\n      }}\n    >\n      Formik State\n    </div>\n    <FormikConsumer>\n      {({ validationSchema, validate, onSubmit, ...rest }) => (\n        <pre\n          style={{\n            fontSize: '.65rem',\n            padding: '.25rem .5rem',\n            overflowX: 'scroll',\n          }}\n        >\n          {JSON.stringify(rest, null, 2)}\n        </pre>\n      )}\n    </FormikConsumer>\n  </div>\n);\n","import React from 'react';\n\nexport default function Line() {\n    return (<hr />);\n}","// https://github.com/jaredpalmer/formik/blob/master/examples/Arrays.js\n\n// in this component we add dynamic fields when we click button and we can remove that field row also\n\nimport React from 'react';\nimport { Formik, Field, Form, ErrorMessage, FieldArray } from 'formik';\nimport * as Yup from 'yup';\nimport { Debug } from './Debug';\nimport Line from './Line';\n\nconst initialValues = {\n    friends: [\n        {\n            name: '',\n            email: '',\n        },\n    ],\n};\n\n// within a `FieldArray`'s render\nconst FriendArrayErrors = ({ errors }) =>\n    typeof errors.friends === 'string' ? <div className='text-danger small'>{errors.friends}</div> : null;\n\n// https://github.com/jquense/yup/issues/345#issuecomment-487320558\n\n// custom method to check if array contains any duplicate email address\nYup.addMethod(Yup.array, 'unique', function (message, mapper = a => a) {\n    return this.test('unique', message, function (list) {\n        return list.length === new Set(list.map(mapper)).size;\n    });\n});\n\nconst validationSchema = Yup.object().shape({\n    friends: Yup.array()\n        .of(\n            Yup.object().shape({\n                name: Yup.string()\n                    .min(4, 'too short')\n                    .required('Name Required'), // these constraints take precedence\n                email: Yup.string()\n                    .email('Invalid email address')\n                    .required('Email Required'), // these constraints take precedence\n            })\n        )\n        .unique('duplicate email', a => a.email)\n        .required('Must have friends') // these constraints are shown if and only if inner constraints are satisfied\n        .min(3, 'Minimum of 3 friends'),\n});\n\nconst Arrays = () => (\n    <>\n        <h3 className='text-center mb-3'>Arrays Dyanmic Field object</h3>\n        <Formik\n            initialValues={initialValues}\n            validationSchema={validationSchema}\n            onSubmit={values => {\n                setTimeout(() => {\n                    alert(JSON.stringify(values, null, 2));\n                }, 500);\n            }}\n            render={({\n                values,\n                errors,\n                touched,\n                isSubmitting }) => (\n                    <Form>\n                        <FieldArray\n                            name=\"friends\"\n                            render={({ insert, remove, push }) => (\n                                <div>\n                                    {values.friends.length > 0 &&\n                                        values.friends.map((friend, index) => (\n                                            <div className=\"d-flex align-items-center\" key={index}>\n                                                <div className=\"col\">\n                                                    <label htmlFor={`friends.${index}.name`}>Name</label>\n                                                    <Field\n                                                        name={`friends.${index}.name`}\n                                                        placeholder=\"Jane Doe\"\n                                                        type=\"text\"\n                                                        className=\"form-control\"\n                                                    />\n                                                    <ErrorMessage\n                                                        name={`friends.${index}.name`}\n                                                        component=\"div\"\n                                                        className='text-danger small'\n                                                    />\n                                                </div>\n                                                <div className=\"col\">\n                                                    <label htmlFor={`friends.${index}.email`}>Email</label>\n                                                    <Field\n                                                        name={`friends.${index}.email`}\n                                                        placeholder=\"jane@acme.com\"\n                                                        type=\"email\"\n                                                        className=\"form-control\"\n                                                    />\n                                                    <ErrorMessage\n                                                        name={`friends.${index}.email`}\n                                                        component=\"div\"\n                                                        className='text-danger small'\n                                                    />\n                                                </div>\n                                                <div className=\"col\">\n                                                    <button\n                                                        type=\"button\"\n                                                        className=\"btn btn-danger\"\n                                                        onClick={() => {\n                                                            if (values.friends.length > 1) {\n                                                                return remove(index)\n                                                            }\n                                                        }}\n                                                    >X</button>\n                                                </div>\n                                            </div>\n                                        ))}\n                                    <button\n                                        type=\"button\"\n                                        className=\"btn btn-warning btn-sm mt-2\"\n                                        onClick={() => push({ name: '', email: '' })}\n                                    >Add Friend</button>\n                                </div>\n                            )}\n                        />\n                        <button type=\"submit\" className=\"btn btn-primary mt-2\">Invite</button>\n                        <FriendArrayErrors errors={errors} />\n                        {/* <p>{JSON.stringify(errors, null, 2)}</p>\n                                    <p>{JSON.stringify(values, null, 2)}</p> */}\n                        <Debug />\n                    </Form>\n                )}\n        />\n        <Line />\n    </>\n);\n\nexport default Arrays;","import React from 'react';\nimport { Formik, Field, Form } from 'formik';\nimport { Debug } from './Debug';\nimport Line from './Line';\n\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst AsyncSubmit = () => (\n  <>\n    <h3>AsyncSubmit Sign Up</h3>\n    <Formik\n      initialValues={{\n        firstName: '',\n        lastName: '',\n        email: '',\n      }}\n      onSubmit={async values => {\n        await sleep(1000);\n        alert(JSON.stringify(values, null, 2));\n      }}\n    >\n      {({ isSubmitting }) => (\n        <Form>\n          <label htmlFor=\"firstName\">First Name</label>\n          <Field className=\"form-control\" name=\"firstName\" placeholder=\"Jane\" />\n\n          <label htmlFor=\"lastName\">Last Name</label>\n          <Field className=\"form-control\" name=\"lastName\" placeholder=\"Doe\" />\n\n          <label htmlFor=\"email\">Email</label>\n          <Field className=\"form-control\" name=\"email\" placeholder=\"jane@acme.com\" type=\"email\" />\n          <button className=\"btn btn-primary mt-2\" type=\"submit\" disabled={isSubmitting}>\n            Submit\n                </button>\n          <Debug />\n        </Form>\n      )}\n    </Formik>\n    <Line />\n  </>\n);\n\nexport default AsyncSubmit;\n","import React from 'react';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport { Debug } from './Debug';\nimport Line from './Line';\n\n// Async Validation\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst validate = (values) => {\n  return sleep(300).then((res) => {\n    console.log(res);\n    let errors = {};\n\n    if (['admin', 'null', 'god'].includes(values.username)) {\n      errors.username = 'Nice try';\n    }\n\n    if (!values.username) {\n      errors.username = 'Required';\n    }\n\n    if (Object.keys(errors).length) {\n      throw errors;\n    }\n  });\n};\n\nconst handleOnSubmit = (values, { setSubmitting, resetForm }) => {\n  console.log('handleOnSubmit');\n  console.log({ values });\n  sleep(500).then(() => {\n    alert(JSON.stringify(values, null, 2));\n    resetForm();\n    setSubmitting(false);\n  });\n}\n\nconst initialValues = {\n  username: '',\n};\n\nconst Username = () => (\n  <>\n    <h3>AsyncValidation Pick a username</h3>\n    <Formik\n      initialValues={initialValues}\n      validate={validate}\n      onSubmit={handleOnSubmit}\n      render={({ isSubmitting, handleReset, errors, touched }) => (\n        <Form>\n          <label htmlFor=\"username\">Username</label>\n          <Field className=\"form-control\" name=\"username\" type=\"text\" />\n          <ErrorMessage className='text-danger small' component=\"div\" name=\"username\" />\n          <button\n            className=\"btn btn-primary m-2\"\n            type=\"submit\"\n            disabled={isSubmitting}>Submit</button>\n          <button\n            type=\"reset\"\n            className=\"btn btn-warning m-2\"\n            disabled={isSubmitting}\n            onClick={handleReset}>Reset</button>\n          <Debug />\n        </Form>\n      )}\n    />\n    <Line />\n  </>\n);\n\nexport default Username;\n","import React from 'react';\nimport { Formik, Field, Form } from 'formik';\nimport { Debug } from './Debug';\nimport Line from './Line';\n\nconst initialValues = {\n  firstName: '',\n  lastName: '',\n  email: 'a',\n}\n\nconst Basic = () => (\n  <>\n    <h3>Basic Sign Up</h3>\n    <Formik\n      initialValues={initialValues}\n      onSubmit={values => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n        }, 500);\n      }}\n      render={() => (\n        <Form>\n          <label htmlFor=\"firstName\">First Name</label>\n          <Field className=\"form-control\" name=\"firstName\" placeholder=\"Jane\" />\n\n          <label htmlFor=\"lastName\">Last Name</label>\n          <Field className=\"form-control\" name=\"lastName\" placeholder=\"Doe\" />\n\n          <label htmlFor=\"email\">Email</label>\n          <Field className=\"form-control\" name=\"email\" placeholder=\"jane@acme.com\" type=\"email\" />\n          <button className=\"btn btn-primary mt-2\" type=\"submit\">Submit</button>\n          <Debug />\n        </Form>\n      )}\n    />\n    <Line />\n  </>\n);\n\nexport default Basic;\n","import React from 'react';\nimport { Formik, Field, Form } from 'formik';\nimport { Debug } from './Debug';\nimport Line from './Line';\n\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst CheckboxExample = () => (\n  <>\n    <h3>Checkboxes</h3>\n    <p>\n      This example demonstrates how to properly create checkboxes with Formik.\n    </p>\n    <Formik\n      initialValues={{\n        isAwesome: false,\n        terms: false,\n        newsletter: false,\n        jobType: ['founder'],\n        location: [],\n      }}\n      onSubmit={async values => {\n        await sleep(1000);\n        alert(JSON.stringify(values, null, 2));\n      }}\n    >\n      {({ isSubmitting, getFieldProps, handleChange, handleBlur, values }) => (\n        <Form>\n          {/*\n            This first checkbox will result in a boolean value being stored.\n          */}\n          <div className=\"label\">Basic Info</div>\n          <label>\n            <Field className=\"form-control\" type=\"checkbox\" name=\"isAwesome\" />\n            Are you awesome?\n          </label>\n          {/*\n            Multiple checkboxes with the same name attribute, but different\n            value attributes will be considered a \"checkbox group\". Formik will automagically\n            bind the checked values to a single array for your benefit. All the add and remove\n            logic will be taken care of for you.\n          */}\n          <div className=\"label\">\n            What best describes you? (check all that apply)\n          </div>\n          <label>\n            <Field className=\"form-control\" type=\"checkbox\" name=\"jobType\" value=\"designer\" />\n            Designer |\n          </label>\n          <label>\n            <Field className=\"form-control\" type=\"checkbox\" name=\"jobType\" value=\"developer\" />\n            Developer |\n          </label>\n          <label>\n            <Field className=\"form-control\" type=\"checkbox\" name=\"jobType\" value=\"product\" />\n            Product Manager |\n          </label>\n          {/*\n          You do not _need_ to use <Field>/useField to get this behaviorr,\n          using handleChange, handleBlur, and values works as well.\n          */}\n          <label>\n            <input\n              type=\"checkbox\"\n              className=\"form-control\"\n              name=\"jobType\"\n              value=\"founder\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n            />\n            CEO / Founder\n          </label>\n          {/* checked={values.jobType.includes('founder')} */}\n\n\n          {/*\n          The <select> element will also behave the same way if\n          you pass `multiple` prop to it.\n          */}\n          <label htmlFor=\"location\">Where do you work?</label>\n          <Field\n            component=\"select\"\n            id=\"location\"\n            name=\"location\"\n            className=\"form-control\"\n          >\n            <option value=\"NY\">New York</option>\n            <option value=\"SF\">San Francisco</option>\n            <option value=\"CH\">Chicago</option>\n            <option value=\"OTHER\">Other</option>\n          </Field>\n          <label>\n            <Field type=\"checkbox\" name=\"terms\" />I accept the terms and conditions.</label>\n          {/* Here's how you can use a checkbox to show / hide another field */}\n          {!!values.terms ? (\n            <div>\n              <label>\n                <Field type=\"checkbox\" name=\"newsletter\" />\n                Send me the newsletter{' '}\n                <em style={{ color: 'rebeccapurple' }}>\n                  (This is only shown if terms = true)\n                </em>\n              </label>\n            </div>\n          ) : null}\n          <div>\n            <button\n              className=\"btn btn-primary mt-2\"\n              type=\"submit\"\n              disabled={isSubmitting}>\n              Submit\n          </button>\n          </div>\n          <Debug />\n        </Form>\n      )}\n    </Formik>\n    <Line />\n  </>\n);\n\nexport default CheckboxExample;\n","import React from 'react';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { Debug } from './Debug';\nimport Line from './Line';\n\nconst Schema = Yup.object().shape({\n  email: Yup.string().required('This field is required'),\n});\n\n// Async Validation\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst validate = (values) =>\n  console.log({ values });\nsleep(300).then(() => {\n  let errorMessage = { zip: 'This field is required' };\n  throw errorMessage;\n});\n\nconst isRequired = message => value => (!!value ? undefined : message);\n\nconst FieldLevelValidation = () => (\n  <>\n    <h3>CombinedValidations Pick a username</h3>\n    <Formik\n      validationSchema={Schema}\n      validate={validate}\n      initialValues={{\n        username: '',\n        email: '',\n        zip: '',\n      }}\n      onSubmit={values => {\n        sleep(500).then(() => {\n          alert(JSON.stringify(values, null, 2));\n        });\n      }}\n      render={({\n        errors,\n        touched,\n        setFieldValue,\n        setFieldTouched,\n        validateField,\n        validateForm,\n      }) => (\n          <Form>\n            <label htmlFor=\"username\">Username</label>\n            <div>\n              <Field\n                className=\"form-control\"\n                name=\"username\"\n                validate={isRequired('This field is required')}\n                type=\"text\"\n                placeholder=\"username\"\n              />\n              <ErrorMessage className='text-danger small' component=\"div\" name=\"username\" />\n            </div>\n            <br />\n            <div>\n              <Field\n                className=\"form-control\"\n                name=\"email\"\n                validate={isRequired('This field is required')}\n                type=\"text\"\n                placeholder=\"email\"\n              />\n              <ErrorMessage className='text-danger small' component=\"div\" name=\"email\" />\n            </div>\n            <br />\n            <div>\n              <Field\n                className=\"form-control\"\n                name=\"zip\"\n                validate={isRequired('This field is required')}\n                type=\"text\"\n                placeholder=\"zip\"\n              />\n              <ErrorMessage className='text-danger small' component=\"div\" name=\"zip\" />\n            </div>\n            <br />\n            <button className=\"btn btn-primary m-2\" type=\"submit\">Submit</button>\n            <Debug />\n          </Form>\n        )}\n    />\n    <Line />\n  </>\n);\n\nexport default FieldLevelValidation;\n","// https://github.com/jaredpalmer/formik/blob/master/examples/CustomInputs.js\n\n// in this component Fieldset concept is used to group the Field label and errormessage\n\nimport React from 'react';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { Debug } from './Debug';\nimport Line from './Line';\n\n// By combining a vanilla <label> plus Formik's <Field> and <ErrorMessage>,\n// we can abstract a generic \"Fieldset\" component for most of our inputs.\nconst Fieldset = ({ name, label, ...rest }) => (\n    <React.Fragment>\n        <div className=\"form-group\">\n            <label htmlFor={name}>{label}</label>\n            <Field id={name} name={name} {...rest} />\n            <ErrorMessage name={name} className='text-danger small' component='div' />\n        </div>\n    </React.Fragment>\n);\n\nconst initialValues = {\n    email: 'vigneshwaran@chandrasekaran.com',\n    color: 'red',\n    animal: '',\n    website: 'https://github.com/vigneshwaran-chandrasekaran',\n};\n\nconst validationSchema = Yup.object().shape({\n    email: Yup.string()\n        .email('Invalid email address')\n        .required('Required'),\n    color: Yup.string().required('Required'),\n    website: Yup.string()\n        .url('Invalid URL')\n        .required('Required'),\n    animal: Yup.string().required('Required'),\n});\n\nfunction onSubmitHandle(values) {\n    setTimeout(() => {\n        alert(JSON.stringify(values, null, 2));\n    }, 500);\n}\n\n// on component load list of values\n// we can get this details from api call also\nconst animalsList = [\n    {\n        id: 1,\n        value: 'Tiger'\n    }, {\n        id: 2,\n        value: 'Lion'\n    }, {\n        id: 3,\n        value: 'Dog'\n    }, {\n        id: 4,\n        value: 'Cat'\n    }\n];\n\n// generage select dropdown option list dynamically\nfunction Options({ options }) {\n    return (\n        options.map(option => <option key={option.id} value={option.value}>{option.value}</option>)\n    );\n}\n\nconst CustomInputs = () => (\n    <>\n        <h3 className='text-center mb-3'>Grouping fields, dynamic select options</h3>\n        <Formik\n            initialValues={initialValues}\n            validationSchema={validationSchema}\n            onSubmit={values => onSubmitHandle(values)}\n            render={({ isSubmitting, handleReset }) => (\n                <Form>\n                    <Fieldset\n                        name=\"email\"\n                        type=\"email\"\n                        label=\"Email\"\n                        placeholder=\"jane@acme.com\"\n                        className=\"form-control\"\n                    />\n                    <Fieldset\n                        name=\"color\"\n                        className=\"form-control\"\n                        label=\"Favorite Color\"\n                        component=\"select\">\n                        <option value=\"\">Select a Color</option>\n                        <option value=\"red\">Red</option>\n                        <option value=\"green\">Green</option>\n                        <option value=\"blue\">Blue</option>\n                    </Fieldset>\n\n                    <Fieldset\n                        name=\"website\"\n                        type=\"url\"\n                        label=\"Website\"\n                        placeholder=\"https://example.com\"\n                        className=\"form-control\"\n                    />\n\n                    <Fieldset\n                        name=\"animal\"\n                        className=\"form-control\"\n                        component=\"select\"\n                        label=\"Favorite Animal\">\n                        <option value=\"\">Select an animal</option>\n                        <option value=\"tiger\">Tiger</option>\n                        <option value=\"bear\">Bear</option>\n                        <option value=\"shark\">Shark</option>\n                        <Options options={animalsList} />\n                    </Fieldset>\n\n                    <button\n                        type=\"reset\"\n                        className=\"btn btn-warning m-2\"\n                        disabled={isSubmitting}\n                        onClick={handleReset}>Reset</button>\n\n                    <button\n                        type=\"submit\"\n                        className=\"btn btn-primary m-2\">Submit</button>\n\n                    <Debug />\n                </Form>\n            )}\n        />\n        <Line />\n    </>\n);\n\nexport default CustomInputs;","import React from 'react';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { Debug } from './Debug';\nimport Line from './Line';\n\n// While you can use any validation library (or write you own), Formik\n// comes with special support for Yup by @jquense. It has a builder API like\n// React PropTypes / Hapi.js's Joi. You can define these inline or, you may want\n// to keep them separate so you can reuse schemas (e.g. address) across your application.\nconst SignUpSchema = Yup.object().shape({\n  email: Yup.string()\n    .email('Invalid email address')\n    .required('Required'),\n  firstName: Yup.string()\n    .min(2, 'Must be longer than 2 characters')\n    .max(20, 'Nice try, nobody has a first name that long')\n    .required('Required'),\n  lastName: Yup.string()\n    .min(5, 'Must be longer than 5 characters')\n    .max(10, 'Nice try, nobody has a last name that long')\n    .required('Required'),\n});\n\n// <ErrorMessage /> will ONLY render when a field has an error and has been touched.\nconst SignUp = () => (\n  <>\n    <h3>(ErrorMessage) Sign up</h3>\n    <Formik\n      initialValues={{\n        email: '',\n        firstName: '',\n        lastName: '',\n      }}\n      validationSchema={SignUpSchema}\n      onSubmit={values => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n        }, 500);\n      }}\n      render={({ errors, touched }) => (\n        <Form>\n          <label htmlFor=\"firstName\">First Name</label>\n          <Field className=\"form-control\" name=\"firstName\" placeholder=\"Jane\" type=\"text\" />\n          <ErrorMessage\n            name=\"firstName\"\n            component=\"div\"\n            className='text-danger small'\n          />\n\n          <label htmlFor=\"lastName\">Last Name</label>\n          <Field className=\"form-control\" name=\"lastName\" placeholder=\"Doe\" type=\"text\" />\n          {/* this bellow error message is different between other error message component\n          here we can add our own new elements */}\n          <ErrorMessage name=\"lastName\">\n            {(msg /** this is the same as the above */) => (\n              <>\n                <div className='text-danger small'>{msg}</div>\n                <div className='text-success small'>Always shows</div>\n              </>\n            )}\n          </ErrorMessage>\n\n          <label htmlFor=\"email\">Email</label>\n          <Field className=\"form-control\" name=\"email\" placeholder=\"jane@acme.com\" type=\"email\" />\n          {/* This will render a string */}\n          <ErrorMessage name=\"email\" className='text-danger small' />\n\n          <button className=\"btn btn-primary m-2\" type=\"submit\">Submit</button>\n          <Debug />\n        </Form>\n      )}\n    />\n    <Line />\n  </>\n);\n\nexport default SignUp;\n","import React from 'react';\nimport { Formik, FastField, Field, Form } from 'formik';\nimport { Debug } from './Debug';\nimport Line from './Line';\n\nclass Input extends React.Component {\n  renders = 0;\n  render() {\n    return (\n      <div>\n        <input {...this.props} />\n        <p># of renders: {this.renders++}</p>\n      </div>\n    );\n  }\n}\n\n/**\n * https://jaredpalmer.com/formik/docs/api/fastfield\n *\n * <FastField /> is an optimized version of <Field /> meant to be\n * used on large forms (~30+ fields) or when a field has very\n * expensive validation requirements. <FastField /> has the\n * same exact API as <Field>, but implements shouldComponentUpdate()\n * internally to block all additional re-renders unless there\n * are direct updates to the <FastField />'s relevant parts/slice\n * of Formik state.\n */\n\nconst Basic = () => (\n  <>\n    <h3>(FastField) Sign Up</h3>\n    <Formik\n      initialValues={{\n        firstName: '',\n        lastName: '',\n        email: '',\n        field: '',\n      }}\n      onSubmit={(values, { setSubmitting }) => {\n        setTimeout(() => {\n          setSubmitting(false);\n\n          alert(JSON.stringify(values, null, 2));\n        }, 500);\n      }}\n      render={({ isSubmitting }) => (\n        <Form>\n          <label htmlFor=\"firstName\">First Name</label>\n          <FastField\n            className=\"form-control\"\n            name=\"firstName\"\n            placeholder=\"Jane\"\n            component={Input}\n            // as={Input}\n            // as is 2.0 > version feature so use component\n            disabled={isSubmitting}\n          />\n\n          <label htmlFor=\"lastName\">Last Name</label>\n          <FastField\n            className=\"form-control\"\n            name=\"lastName\"\n            placeholder=\"Doe\"\n            component={Input}\n            // as={Input}\n            // as is 2.0 > version feature so use component\n            disabled={isSubmitting}\n          />\n\n          <label htmlFor=\"email\">Email</label>\n          <FastField\n            className=\"form-control\"\n            name=\"email\"\n            placeholder=\"jane@acme.com\"\n            type=\"email\"\n            component={Input}\n            // as={Input}\n            // as is 2.0 > version feature so use component\n            disabled={isSubmitting}\n          />\n\n          <label htmlFor=\"field\">First Name</label>\n          <Field className=\"form-control\" name=\"field\" placeholder=\"field\" type=\"text\" disabled={isSubmitting} />\n\n          <button className=\"btn btn-primary m-2\" type=\"submit\">Submit</button>\n          <Debug />\n        </Form>\n      )}\n    />\n    <Line />\n  </>\n);\n\nexport default Basic;\n","import React from 'react';\nimport { Formik, Field, FastField, Form } from 'formik';\nimport * as Yup from 'yup';\nimport Line from './Line';\n\nclass Input extends React.Component {\n    renders = 0;\n    render() {\n        return (\n            <div>\n                <input {...this.props} />\n                <p># of renders: {this.renders++}</p>\n            </div>\n        );\n    }\n}\n\nconst Basic = () => (\n    <>\n        <h3>(FastFieldWebExample) Sign Up</h3>\n        <Formik\n            initialValues={{\n                firstName: '',\n                lastName: '',\n                email: '',\n            }}\n            validationSchema={Yup.object().shape({\n                firstName: Yup.string().required(),\n                middleInitial: Yup.string(),\n                lastName: Yup.string().required(),\n                email: Yup.string()\n                    .email()\n                    .required(),\n            })}\n            onSubmit={values => {\n                setTimeout(() => {\n                    alert(JSON.stringify(values, null, 2));\n                }, 500);\n            }}\n            render={({ errors, touched, form }) => (\n                <Form>\n                    {/** This <FastField> only updates for changes made to\n           values.firstName, touched.firstName, errors.firstName */}\n                    <label htmlFor=\"firstName\">First Name</label>\n                    <FastField\n                        className=\"form-control\"\n                        name=\"firstName\"\n                        placeholder=\"Weezy\"\n                        component={Input}\n                    />\n\n                    {/** Updates for all changes because it's from the\n           top-level formikProps which get all updates */}\n                    {touched.firstName &&\n                        errors.firstName && <div>{errors.firstName}</div>}\n\n                    <label htmlFor=\"middleInitial\">Middle Initial</label>\n                    <FastField\n                        className=\"form-control\"\n                        name=\"middleInitial\"\n                        placeholder=\"F\"\n                        render={({ field, form }) => (\n                            <div>\n                                <input {...field} />\n                                {/**\n                 * This updates normally because it's from the same slice of Formik state,\n                 * i.e. path to the object matches the name of this <FastField />\n                 */}\n                                {form.touched.middleInitial ? form.errors.middleInitial : null}\n\n                                {/** This won't ever update since it's coming from\n                 from another <Field>/<FastField>'s (i.e. firstName's) slice   */}\n                                {form.touched.firstName && form.errors.firstName\n                                    ? form.errors.firstName\n                                    : null}\n\n                                {/* This doesn't update either */}\n                                {form.submitCount}\n\n                                {/* Imperative methods still work as expected */}\n                                <button\n                                    className=\"btn btn-warning\"\n                                    type=\"button\"\n                                    onClick={form.setFieldValue('middleInitial', 'J')}\n                                >\n                                    J\n                </button>\n                            </div>\n                        )}\n                    />\n\n                    {/** Updates for all changes to Formik state\n           and all changes by all <Field>s and <FastField>s */}\n                    <label htmlFor=\"lastName\">LastName</label>\n                    <Field\n                        className=\"form-control\"\n                        name=\"lastName\"\n                        placeholder=\"Baby\"\n                        render={({ field, form }) => (\n                            <div>\n                                <input {...field} />\n                                {/** Works because this is inside\n                 of a <Field/>, which gets all updates */}\n                                {form.touched.firstName && form.errors.firstName\n                                    ? form.errors.firstName\n                                    : null}\n                            </div>\n                        )}\n                    />\n\n                    {/** Updates for all changes to Formik state and\n           all changes by all <Field>s and <FastField>s */}\n                    <label htmlFor=\"email\">Email</label>\n                    <Field className=\"form-control\"\n                        name=\"email\"\n                        placeholder=\"jane@acme.com\"\n                        type=\"email\" />\n\n                    <button className=\"btn btn-primary m-2\" type=\"submit\">Submit</button>\n                </Form>\n            )}\n        />\n        <Line />\n    </>\n);\n\nexport default Basic;","import React from 'react';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport { Debug } from './Debug';\nimport Line from './Line';\n\nconst isRequired = message => value => (!!value ? undefined : message);\n\n/**\n * In this example\n * setFieldTouched = is used to programmatically touch the field\n * setFieldValue = is used to set value to filed programmatically\n * validateField = validate single filed based on input key value\n */\n\nconst FieldLevelValidation = () => (\n  <div>\n    <h3>(FieldLevelValidation) Pick a username</h3>\n    <Formik\n      initialValues={{ username: '', email: '' }}\n      onSubmit={values => {\n        alert(JSON.stringify(values, null, 2));\n      }}\n      render={({\n        errors,\n        touched,\n        setFieldValue,\n        setFieldTouched,\n        validateField,\n        validateForm,\n      }) => (\n          <Form>\n            <label htmlFor=\"username\">Username</label>\n            <div>\n              <Field\n                className=\"form-control\"\n                name=\"username\"\n                validate={isRequired('This field is required')}\n                type=\"text\"\n                placeholder=\"Username\"\n              />\n              <ErrorMessage className='text-danger small' name=\"username\" component=\"div\" />\n            </div>\n            <br />\n            <div>\n              <Field\n                className=\"form-control\"\n                name=\"email\"\n                validate={isRequired('This field is required')}\n                type=\"text\"\n                placeholder=\"Email\"\n              />\n              <ErrorMessage className='text-danger small' name=\"email\" component=\"div\" />\n            </div>\n\n            <div className=\"mt-4\">\n              <div>username field actions</div>\n              <button\n                className=\"btn btn-primary mr-2\"\n                type=\"button\"\n                onClick={() => {\n                  setFieldTouched('username', true, true);\n                }}\n              >\n                setFieldTouched\n            </button>\n              <button\n                className=\"btn btn-primary mr-2\"\n                type=\"button\"\n                onClick={() => {\n                  setFieldValue('username', '', true);\n                }}\n              >\n                setFieldValue\n            </button>\n              <button\n                className=\"btn btn-primary mr-2\"\n                type=\"button\"\n                onClick={() => {\n                  validateField('username');\n                }}\n              >\n                validateField\n            </button>\n              <br />\n            </div>\n            <br />\n            <div>\n              <div>Form actions</div>\n              <button className=\"btn btn-primary mr-2\" type=\"button\" onClick={validateForm}>\n                validate form\n            </button>\n              <button className=\"btn btn-primary\" type=\"submit\">Submit</button>\n            </div>\n            <Debug />\n          </Form>\n        )}\n    />\n  </div>\n);\n\nexport default FieldLevelValidation;\n","import React from 'react';\nimport { Formik, Field, ErrorMessage } from 'formik';\nimport { Debug } from './Debug';\nimport Line from './Line';\n\n/**\n * In this example\n * we have done multi section form\n * used two sections\n */\n\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst required = value => (value ? undefined : 'Required');\n\nclass Wizard extends React.Component {\n  static Page = ({ children }) => children;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      page: 0,\n      values: props.initialValues,\n    };\n  }\n\n  next = values =>\n    this.setState(state => ({\n      page: Math.min(state.page + 1, this.props.children.length - 1),\n      values,\n    }));\n\n  previous = () =>\n    this.setState(state => ({\n      page: Math.max(state.page - 1, 0),\n    }));\n\n  validate = values => {\n    const activePage = React.Children.toArray(this.props.children)[\n      this.state.page\n    ];\n    return activePage.props.validate ? activePage.props.validate(values) : {};\n  };\n\n  handleSubmit = (values, bag) => {\n    const { children, onSubmit } = this.props;\n    const { page } = this.state;\n    const isLastPage = page === React.Children.count(children) - 1;\n    if (isLastPage) {\n      return onSubmit(values, bag);\n    } else {\n      bag.setTouched({});\n      bag.setSubmitting(false);\n      this.next(values);\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    const { page, values } = this.state;\n    const activePage = React.Children.toArray(children)[page];\n    const isLastPage = page === React.Children.count(children) - 1;\n    return (\n      <Formik\n        initialValues={values}\n        enableReinitialize={false}\n        validate={this.validate}\n        onSubmit={this.handleSubmit}\n        render={({ values, handleSubmit, isSubmitting, handleReset }) => (\n          <form onSubmit={handleSubmit}>\n            {activePage}\n            <div className=\"buttons\">\n              {page > 0 && (\n                <button\n                  type=\"button\"\n                  className=\"btn btn-primary secondary mt-2\"\n                  onClick={this.previous}\n                >\n                  « Previous\n                </button>\n              )}\n\n              {!isLastPage && <button type=\"submit\" className=\"btn btn-primary mt-2\">Next »</button>}\n              {isLastPage && (\n                <button className=\"btn btn-success ml-2 mt-2\" type=\"submit\" disabled={isSubmitting}>\n                  Submit\n                </button>\n              )}\n            </div>\n\n            <Debug />\n          </form>\n        )}\n      />\n    );\n  }\n}\n\nconst App = () => (\n  <div className=\"App\">\n    <h3>(MultistepWizard) Multistep / Form Wizard </h3>\n    <Wizard\n      initialValues={{\n        firstName: '',\n        lastName: '',\n        email: '',\n        favoriteColor: '',\n      }}\n      onSubmit={(values, actions) => {\n        sleep(300).then(() => {\n          window.alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        });\n      }}\n    >\n      <Wizard.Page>\n        <div>\n          <label>First Name</label>\n          <Field\n            className=\"form-control\"\n            name=\"firstName\"\n            component=\"input\"\n            type=\"text\"\n            placeholder=\"First Name\"\n            validate={required}\n          />\n          <ErrorMessage\n            name=\"firstName\"\n            component=\"div\"\n            className=\"text-danger small\"\n          />\n        </div>\n        <div>\n          <label>Last Name</label>\n          <Field\n            className=\"form-control\"\n            name=\"lastName\"\n            component=\"input\"\n            type=\"text\"\n            placeholder=\"Last Name\"\n            validate={required}\n          />\n          <ErrorMessage\n            name=\"lastName\"\n            component=\"div\"\n            className=\"text-danger small\"\n          />\n        </div>\n      </Wizard.Page>\n      <Wizard.Page\n        validate={values => {\n          const errors = {};\n          if (!values.email) {\n            errors.email = 'Required';\n          }\n          if (!values.favoriteColor) {\n            errors.favoriteColor = 'Required';\n          }\n          return errors;\n        }}\n      >\n        <div>\n          <label>Email</label>\n          <Field\n            className=\"form-control\"\n            name=\"email\"\n            component=\"input\"\n            type=\"email\"\n            placeholder=\"Email\"\n          />\n          <ErrorMessage name=\"email\" component=\"div\" className=\"text-danger small\" />\n        </div>\n        <div>\n          <label>Favorite Color</label>\n          <Field name=\"favoriteColor\" component=\"select\" className=\"form-control\">\n            <option value=\"\">Select a Color</option>\n            <option value=\"#ff0000\">❤️ Red</option>\n            <option value=\"#00ff00\">💚 Green</option>\n            <option value=\"#0000ff\">💙 Blue</option>\n          </Field>\n          <ErrorMessage\n            name=\"favoriteColor\"\n            component=\"div\"\n            className=\"text-danger small\"\n          />\n        </div>\n      </Wizard.Page>\n    </Wizard>\n    <Line />\n  </div>\n);\n\nexport default App;\n","import React from 'react';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { Debug } from './Debug';\nimport Line from './Line';\n\n// While you can use any validation library (or write you own), Formik\n// comes with special support for Yup by @jquense. It has a builder API like\n// React PropTypes / Hapi.js's Joi. You can define these inline or, you may want\n// to keep them separate so you can reuse schemas (e.g. address) across your application.\nconst SignUpSchema = Yup.object().shape({\n  email: Yup.string()\n    .email('Invalid email address')\n    .required('Required'),\n  firstName: Yup.string()\n    .min(2, 'Must be longer than 2 characters')\n    .max(20, 'Nice try, nobody has a first name that long')\n    .required('Required'),\n  lastName: Yup.string()\n    .min(2, 'Must be longer than 2 characters')\n    .max(20, 'Nice try, nobody has a last name that long')\n    .required('Required'),\n});\n\nconst SignUp = () => (\n  <>\n    <h3>(SchemaValidation) Sign up </h3>\n    <Formik\n      initialValues={{\n        email: '',\n        firstName: '',\n        lastName: '',\n      }}\n      validationSchema={SignUpSchema}\n      onSubmit={values => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n        }, 500);\n      }}\n      render={({ errors, touched }) => (\n        <Form>\n          <label htmlFor=\"firstName\">First Name</label>\n          <Field\n            className=\"form-control\"\n            name=\"firstName\"\n            placeholder=\"Jane\"\n            type=\"text\" />\n\n          <ErrorMessage\n            name=\"firstName\"\n            component=\"div\"\n            className=\"text-danger small\"\n          />\n\n          <label htmlFor=\"lastName\">Last Name</label>\n          <Field\n            className=\"form-control\"\n            name=\"lastName\"\n            placeholder=\"Doe\"\n            type=\"text\" />\n          <ErrorMessage\n            name=\"lastName\"\n            component=\"div\"\n            className=\"text-danger small\"\n          />\n\n          <label htmlFor=\"email\">Email</label>\n          <Field\n            className=\"form-control\"\n            name=\"email\"\n            placeholder=\"jane@acme.com\"\n            type=\"email\" />\n          <ErrorMessage\n            name=\"email\"\n            component=\"div\"\n            className=\"text-danger small\" />\n\n          <button className=\"btn btn-primary secondary mt-2\" type=\"submit\">Submit</button>\n          <Debug />\n        </Form>\n      )}\n    />\n    <Line />\n  </>\n);\n\nexport default SignUp;\n","import React from 'react';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport { Debug } from './Debug';\nimport Line from './Line';\n\nconst validate = values => {\n  let errors = {};\n  if (!values.email) {\n    errors.email = 'Required';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = 'Invalid email address';\n  }\n  return errors;\n};\n\nconst SignIn = () => (\n  <>\n    <h1>(SyncValidation) Sign In</h1>\n    <Formik\n      initialValues={{\n        email: '',\n        password: '',\n      }}\n      validate={validate}\n      onSubmit={values => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n        }, 500);\n      }}\n      render={({ errors, touched }) => (\n        <Form>\n          <label htmlFor=\"email\">Email</label>\n          <Field\n            className=\"form-control\"\n            name=\"email\"\n            placeholder=\"john@acme.com\"\n            type=\"email\" />\n          <div className=\"field-error\">\n            <ErrorMessage\n              name=\"email\"\n              component=\"div\"\n              className=\"text-danger small\" />\n          </div>\n          <label htmlFor=\"password\">Password</label>\n          <Field\n            className=\"form-control\"\n            name=\"password\"\n            type=\"password\" />\n          <button className=\"btn btn-primary secondary mt-2\" type=\"submit\">Sign In</button>\n          <Debug />\n        </Form>\n      )}\n    />\n    <Line />\n  </>\n);\n\nexport default SignIn;\n","import React from 'react';\nimport { withFormik, Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { Debug } from './Debug';\nimport Line from './Line';\n\nconst FormOne = ({\n    values,\n    errors,\n    touched,\n    isSubmitting\n}) => {\n    return (\n        <>\n            <h3>(FormOne)</h3>\n            <Form>\n                <div className=\"form-group\">\n                    <label htmlFor=\"email\">Email address:</label>\n                    <Field\n                        type=\"email\"\n                        className=\"form-control\"\n                        id=\"email\"\n                        name=\"email\"\n                    />\n                    {touched.email && errors.email && <div className='text-danger small my-2'>{errors.email}</div>}\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"pwd\">Password:</label>\n                    <Field\n                        type=\"password\"\n                        className=\"form-control\"\n                        id=\"pwd\"\n                        name=\"password\"\n                    />\n                    {touched.password && errors.password && <div className='text-danger small my-2'>{errors.password}</div>}\n                </div>\n                <div className=\"form-group form-check\">\n                    <label className=\"form-check-label\">\n                        <Field\n                            className=\"form-check-input\"\n                            type=\"checkbox\"\n                            name=\"newsletter\"\n                            checked={values.newsletter}\n                        />\n                        <span> I agree your condition.</span>\n                    </label>\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"sel1\">Select list:</label>\n                    <Field component=\"select\" name=\"plan\" className=\"form-control\" id=\"sel1\">\n                        <option value=''>Select your plan</option>\n                        <option value='1'>1</option>\n                        <option value='2'>2</option>\n                        <option value='3'>3</option>\n                        <option value='4'>4</option>\n                    </Field>\n                </div>\n                {touched.plan && errors.plan && <div className='text-danger small my-2'>{errors.plan}</div>}\n                <ErrorMessage name=\"plan\" className=\"text-danger small my-2\" component='div' />\n                <button disabled={isSubmitting} type=\"submit\" className=\"btn btn-primary\">Submit</button>\n                <Debug />\n            </Form>\n            <Line />\n        </>\n    );\n}\n\nconst FormSchema = Yup.object().shape({\n    // we have added custom error messgae for email validation\n    // default email validation error message is : `email must be a valid email`\n    email: Yup.string()\n        .email('Please enter valid email')\n        .required(),\n    password: Yup.string()\n        .min(3, 'Too Short!')\n        .max(30)\n        .required(),\n    plan: Yup.string()\n        .required('Required')\n});\n\nconst FormOneFormik = withFormik({\n    mapPropsToValues({ email, password, newsletter, plan }) {\n        // if we pass props to component means we can get it in mapPropsToValues(props)\n        return {\n            email: email || 'vigneshwaran',\n            password: password || '',\n            newsletter: newsletter || false,\n            plan: plan || '2',\n        }\n    },\n    validationSchema: FormSchema,\n    handleSubmit(values, { resetForm, setErrors, setSubmitting }) {\n        console.log({ values });\n        setTimeout(() => {\n            if (values.email === 'hello@gmail.com') {\n                setErrors({\n                    email: 'Email is already taken'\n                });\n            } else {\n                resetForm();\n            }\n            setSubmitting(false);\n        }, 2000);\n    }\n})(FormOne);\n\nexport default FormOneFormik;","import React from 'react';\n\nexport default function Error({ touched, message }) {\n    if (!touched) {\n        return <div>&nbsp;</div>;\n    }\n    if (message) {\n        return <div className='text-danger'>{message} <span role=\"img\" aria-label='Emoji'>😟</span></div>;\n    }\n    return <div className='text-success'>all good <span role=\"img\" aria-label='Emoji'>😃</span></div>;\n}\n","import React, { useState } from 'react';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport Autosuggest from 'react-autosuggest';\nimport axios from 'axios';\nimport Error from './Error';\nimport Line from './Line';\n\nconst validationSchema = Yup.object().shape({\n    userName: Yup.string()\n        .min(1)\n        .max(15)\n        .required(),\n    email: Yup.string()\n        .email()\n        .min(1)\n        .max(15)\n        .required(),\n    country: Yup.string()\n        .required()\n});\n\n// initial state (starting field values)\nconst initialValues = {\n    email: 'one@g.coms',\n    userName: 'two',\n    country: ''\n};\n\nexport default function FormTwo() {\n    const [country, setCountry] = useState('');\n    const [suggestions, setSuggestions] = useState([]);\n\n    function onSuggestionsClearRequested() {\n        console.log('hi');\n        setSuggestions([]);\n    }\n\n    return (\n        <>\n            <h3>(FormOne)</h3>\n            <Formik\n                initialValues={initialValues}\n                validationSchema={validationSchema}\n                onSubmit={(values, { setSubmitting, resetForm }) => {\n                    console.log({ values });\n                    setSubmitting(true);\n                    setTimeout(() => {\n                        alert(JSON.stringify(values, null, 2));\n                        resetForm();\n                        setSubmitting(false);\n                    }, 500);\n                }}\n            >\n                {({\n                    values,\n                    errors,\n                    touched,\n                    handleChange,\n                    handleBlur,\n                    handleSubmit,\n                    isSubmitting,\n                    setFieldValue\n                }) => (\n                        <form onSubmit={handleSubmit}>\n                            <div className=\"form-group\">\n                                <label htmlFor=\"email\">Email address:</label>\n                                <input\n                                    type=\"email\"\n                                    className={\"form-control \" + (touched.email && errors.email ? 'border-danger' : '')}\n                                    id=\"email\"\n                                    name=\"email\"\n                                    placeholder='Enter your email'\n                                    value={values.email}\n                                    onBlur={handleBlur}\n                                    onChange={handleChange}\n                                />\n                                <Error touched={touched.email} message={errors.email} />\n                            </div>\n                            <div className=\"form-group\">\n                                <label htmlFor='userName'>Name</label>\n                                <input\n                                    type='text'\n                                    className={\"form-control \" + (touched.userName && errors.userName ? 'border-danger' : '')}\n                                    id='userName'\n                                    name='userName'\n                                    placeholder='Enter your name'\n                                    value={values.userName}\n                                    onBlur={handleBlur}\n                                    onChange={handleChange}\n                                />\n                                <Error touched={touched.userName} message={errors.userName} />\n                            </div>\n\n                            <div className=\"form-group\">\n                                <label htmlFor='autosuggest'>Autosuggest</label>\n                                <Autosuggest\n                                    inputProps={{\n                                        value: country,          // usually comes from the application state\n                                        // onBlur,         // called when the input loses focus, e.g. when user presses Tab\n                                        type: 'search',\n                                        placeholder: 'Enter city or postcode',\n                                        className: \"form-control \" + (touched.country && errors.country ? 'border-danger' : ''),\n                                        autoComplete: 'hello',\n                                        name: 'autosuggest',\n                                        id: 'autosuggest',\n                                        onChange: (_event, { newValue }) => {\n                                            // called every time the input value changes\n                                            console.log({ newValue });\n                                            setCountry(newValue);\n                                            console.log(country);\n                                        }\n                                    }}\n                                    suggestions={suggestions}\n                                    onSuggestionsFetchRequested={async ({ value }) => {\n                                        console.log({ value });\n                                        if (!value) {\n                                            setSuggestions([]);\n                                            return;\n                                        }\n\n                                        try {\n                                            const result = await axios.get(`https://restcountries.eu/rest/v2/name/${value}`);\n                                            console.log(result.data);\n                                            setSuggestions(result.data.map(row => ({\n                                                name: row.name,\n                                                flag: row.flag\n                                            })));\n                                        } catch (error) {\n                                            setSuggestions([]);\n                                        }\n                                    }}\n                                    onSuggestionsClearRequested={onSuggestionsClearRequested}\n                                    getSuggestionValue={(suggestion) => {\n                                        return suggestion.name;\n                                    }}\n                                    renderSuggestion={(suggestion) => {\n                                        return <div>\n                                            <img\n                                                style={{ width: '25px', paddingRight: '10px' }}\n                                                src={suggestion.flag}\n                                                alt={suggestion.name} />\n                                            {suggestion.name}\n                                        </div>;\n                                    }}\n                                    onSuggestionSelected={(event,\n                                        { suggestion, suggestionValue, suggestionIndex, sectionIndex, method }) => {\n                                        if (method === 'enter') {\n                                            event.preventDefault();\n                                        }\n                                        setCountry(suggestion.name);\n                                        setFieldValue('country', suggestion.name);\n                                    }}\n                                />\n                                <Error touched={touched.country} message={errors.country} />\n\n                            </div>\n                            <div>\n                                <button\n                                    disabled={isSubmitting}\n                                    type=\"submit\"\n                                    className=\"btn btn-primary\">\n                                    Submit\n                                        </button>\n                            </div>\n                            {JSON.stringify(values)}\n                        </form>\n                    )}\n            </Formik>\n            <Line />\n        </>\n    )\n}\n","import React from 'react'\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport Line from './Line';\n\nconst FormThree = () => (\n    <>\n        <h3>(FormThree) Any place in your app!</h3>\n        <Formik\n            initialValues={{ email: '', password: '' }}\n            validate={values => {\n                let errors = {};\n                if (!values.email) {\n                    errors.email = 'Required';\n                } else if (\n                    !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\n                ) {\n                    errors.email = 'Invalid email address';\n                }\n                if (!values.password) {\n                    errors.password = 'Required';\n                }\n                return errors;\n            }}\n            onSubmit={(values, { setSubmitting }) => {\n                setTimeout(() => {\n                    alert(JSON.stringify(values, null, 2));\n                    setSubmitting(false);\n                }, 400);\n            }}\n        >\n            {({ isSubmitting }) => (\n                <Form>\n                    <Field\n                        className=\"form-control mb-2\"\n                        type=\"email\"\n                        name=\"email\"\n                        placeholder=\"email\" />\n                    <ErrorMessage className='text-danger small' name=\"email\" component=\"div\" />\n                    <Field\n                        className=\"form-control mb-2\"\n                        type=\"password\"\n                        name=\"password\"\n                        placeholder=\"password\" />\n                    <ErrorMessage className='text-danger small' name=\"password\" component=\"div\" />\n                    <button className=\"btn btn-primary m-2\" type=\"submit\" disabled={isSubmitting}>\n                        Submit\n                    </button>\n                </Form>\n            )}\n        </Formik>\n        <Line />\n    </>\n);\n\nexport default FormThree;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport Arrays from './components/Arrays';\nimport AsyncSubmit from './components/AsyncSubmit';\nimport AsyncValidation from './components/AsyncValidation';\nimport Basic from './components/Basic';\nimport Checkbox from './components/Checkbox';\nimport CombinedValidations from './components/CombinedValidations';\nimport CustomInputs from './components/CustomInputs';\nimport ErrorMessage from './components/ErrorMessage';\nimport FastField from './components/FastField';\nimport FastFieldWebExample from './components/FastFieldWebExample';\nimport FieldLevelValidation from './components/FieldLevelValidation';\nimport MultistepWizard from './components/MultistepWizard';\nimport SchemaValidation from './components/SchemaValidation';\nimport SyncValidation from './components/SyncValidation';\nimport FormOne from './components/FormOne';\nimport FormTwo from './components/FormTwo';\nimport FormThree from './components/FormThree';\n\nexport default function App() {\n  return (\n    <div className=\"container\">\n      <div className='d-flex flex-row justify-content-center'>\n        <div className='col-2'></div>\n        <div className='col-8'>\n          <Arrays />\n          <AsyncSubmit />\n          <AsyncValidation />\n          <Basic />\n          <Checkbox />\n          <CombinedValidations />\n          <CustomInputs />\n          <ErrorMessage />\n          <FastField />\n          <FastFieldWebExample />\n          <FieldLevelValidation />\n          <MultistepWizard />\n          <SchemaValidation />\n          <SyncValidation />\n          <FormOne email='hello' />\n          <FormTwo />\n          <FormThree />\n        </div>\n        <div className='col-2'></div>\n      </div>\n    </div>\n  )\n}"],"sourceRoot":""}