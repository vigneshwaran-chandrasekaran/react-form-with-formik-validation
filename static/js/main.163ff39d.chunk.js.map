{"version":3,"sources":["components/Debug.js","components/Line.js","components/Arrays.js","components/AsyncValidation.js","components/Checkbox.js","components/CombinedValidations.js","components/CustomInputs.js","components/ErrorMessage.js","components/FastField.js","components/FieldLevelValidation.js","components/FastFieldWebExample.js","components/MultistepWizard.js","components/SchemaValidation.js","components/SyncValidation.js","components/FormOne.js","components/Error.js","components/FormTwo.js","components/FormThree.js","components/AllInOneValidation.js","App.js","serviceWorker.js","index.js"],"names":["Debug","style","margin","borderRadius","background","boxShadow","textTransform","fontSize","borderTopLeftRadius","borderTopRightRadius","fontWeight","padding","color","letterSpacing","validationSchema","validate","onSubmit","rest","overflowX","JSON","stringify","Line","initialValues","friends","name","undefined","email","FriendArrayErrors","errors","className","Yup","message","mapper","a","this","test","list","length","Set","map","size","shape","of","min","required","unique","Arrays","values","setTimeout","alert","touched","isSubmitting","render","insert","remove","push","friend","index","key","htmlFor","placeholder","type","component","onClick","sleep","ms","Promise","resolve","then","res","console","log","includes","username","Object","keys","handleOnSubmit","setSubmitting","resetForm","Username","handleReset","disabled","CheckboxExample","isAwesome","terms","newsletter","jobType","location","handleChange","getFieldProps","handleBlur","value","onChange","onBlur","id","Schema","email2","isRequired","FieldLevelValidation","username2","zip2","data-testid","Fieldset","label","animal","website","url","onSubmitHandle","animalsList","Options","options","option","CustomInputs","as","SignUpSchema","firstName","max","lastName","SignUp","msg","Input","renders","props","React","Component","Basic","field","setFieldValue","setFieldTouched","validateField","validateForm","Wizard","next","setState","state","page","Math","children","previous","activePage","Children","toArray","handleSubmit","bag","count","setTouched","isLastPage","enableReinitialize","Page","App","favoriteColor","actions","window","SignIn","password","FormSchema","plan","FormOneFormik","withFormik","mapPropsToValues","setErrors","checked","Error","role","aria-label","userName","country","FormTwo","useState","setCountry","suggestions","setSuggestions","onSuggestionsClearRequested","inputProps","autoComplete","_event","newValue","onSuggestionsFetchRequested","axios","get","result","data","row","flag","getSuggestionValue","suggestion","renderSuggestion","width","paddingRight","src","alt","onSuggestionSelected","event","suggestionValue","suggestionIndex","sectionIndex","method","preventDefault","FormThree","users","strict","trim","lowercase","some","user","passwordConfirmation","oneOf","changepassword","when","is","val","phoneNumber","matches","AllInOneValidation","ExampleValidations","AsyncValidation","Checkbox","CombinedValidations","ErrorMessage","FastField","MultistepWizard","SchemaValidation","SyncValidation","Boolean","hostname","match","ReactDOM","to","path","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.163ff39d.chunk.js","sourcesContent":["import React from 'react';\nimport { FormikConsumer } from 'formik';\n\nexport const Debug = () => (\n\t<div\n\t\tstyle={{\n\t\t\tmargin: '3rem 0',\n\t\t\tborderRadius: 4,\n\t\t\tbackground: '#f6f8fa',\n\n\t\t\tboxShadow: '0 0 1px  #eee inset',\n\t\t}}\n\t>\n\t\t<div\n\t\t\tstyle={{\n\t\t\t\ttextTransform: 'uppercase',\n\t\t\t\tfontSize: 11,\n\t\t\t\tborderTopLeftRadius: 4,\n\t\t\t\tborderTopRightRadius: 4,\n\t\t\t\tfontWeight: 500,\n\t\t\t\tpadding: '.5rem',\n\t\t\t\tbackground: '#555',\n\t\t\t\tcolor: '#fff',\n\t\t\t\tletterSpacing: '1px',\n\t\t\t}}\n\t\t>\n\t\t\tFormik State\n\t\t</div>\n\t\t<FormikConsumer>\n\t\t\t{({ validationSchema, validate, onSubmit, ...rest }) => (\n\t\t\t\t<pre\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tfontSize: '.65rem',\n\t\t\t\t\t\tpadding: '.25rem .5rem',\n\t\t\t\t\t\toverflowX: 'scroll',\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{JSON.stringify(rest, null, 2)}\n\t\t\t\t</pre>\n\t\t\t)}\n\t\t</FormikConsumer>\n\t</div>\n);\n","import React from 'react';\n\nexport default function Line() {\n    return (<hr />);\n}","// https://github.com/jaredpalmer/formik/blob/master/examples/Arrays.js\n\n// in this component we add dynamic fields when we click button and we can remove that field row also\n\nimport React from 'react';\nimport { Formik, Field, Form, ErrorMessage, FieldArray } from 'formik';\nimport * as Yup from 'yup';\nimport { Debug } from './Debug';\nimport Line from './Line';\n\nconst initialValues = {\n\tfriends: [\n\t\t{\n\t\t\tname: undefined,\n\t\t\temail: undefined,\n\t\t},\n\t],\n};\n\n// within a `FieldArray`'s render\nconst FriendArrayErrors = ({ errors }) =>\n\ttypeof errors.friends === 'string' ? (\n\t\t<div className=\"text-danger small\">{errors.friends}</div>\n\t) : null;\n\n// https://github.com/jquense/yup/issues/345#issuecomment-487320558\n\n// custom method to check if array contains any duplicate email address\nYup.addMethod(Yup.array, 'unique', function(message, mapper = a => a) {\n\treturn this.test('unique', message, function(list) {\n\t\treturn list.length === new Set(list.map(mapper)).size;\n\t});\n});\n\nconst validationSchema = Yup.object().shape({\n\tfriends: Yup.array()\n\t\t.of(\n\t\t\tYup.object().shape({\n\t\t\t\tname: Yup.string()\n\t\t\t\t\t.min(4, 'too short')\n\t\t\t\t\t.required('Name Required'), // these constraints take precedence\n\t\t\t\temail: Yup.string()\n\t\t\t\t\t.email('Invalid email address')\n\t\t\t\t\t.required('Email Required'), // these constraints take precedence\n\t\t\t})\n\t\t)\n\t\t.unique('duplicate email', a => a.email)\n\t\t.required('Must have friends') // these constraints are shown if and only if inner constraints are satisfied\n\t\t.min(3, 'Minimum of 3 friends'),\n});\n\nconst Arrays = () => (\n\t<>\n\t\t<h3 className=\"text-center mb-3\">Arrays Dyanmic Field object</h3>\n\t\t<Formik\n\t\t\tinitialValues={initialValues}\n\t\t\tvalidationSchema={validationSchema}\n\t\t\tonSubmit={values => {\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\talert(JSON.stringify(values, null, 2));\n\t\t\t\t}, 500);\n\t\t\t}}\n\t\t>\n\t\t\t{({ values, errors, touched, isSubmitting }) => (\n\t\t\t\t<Form>\n\t\t\t\t\t<FieldArray\n\t\t\t\t\t\tname=\"friends\"\n\t\t\t\t\t\trender={({ insert, remove, push }) => (\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t{values.friends.length > 0 &&\n\t\t\t\t\t\t\t\t\tvalues.friends.map((friend, index) => (\n\t\t\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"d-flex align-items-center\"\n\t\t\t\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"col\">\n\t\t\t\t\t\t\t\t\t\t\t\t<label\n\t\t\t\t\t\t\t\t\t\t\t\t\thtmlFor={`friends.${index}.name`}\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\tName\n\t\t\t\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t\t\t\t<Field\n\t\t\t\t\t\t\t\t\t\t\t\t\tname={`friends.${index}.name`}\n\t\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Jane Doe\"\n\t\t\t\t\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t<ErrorMessage\n\t\t\t\t\t\t\t\t\t\t\t\t\tname={`friends.${index}.name`}\n\t\t\t\t\t\t\t\t\t\t\t\t\tcomponent=\"div\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"text-danger small\"\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"col\">\n\t\t\t\t\t\t\t\t\t\t\t\t<label\n\t\t\t\t\t\t\t\t\t\t\t\t\thtmlFor={`friends.${index}.email`}\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\tEmail\n\t\t\t\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t\t\t\t<Field\n\t\t\t\t\t\t\t\t\t\t\t\t\tname={`friends.${index}.email`}\n\t\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"jane@acme.com\"\n\t\t\t\t\t\t\t\t\t\t\t\t\ttype=\"email\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t<ErrorMessage\n\t\t\t\t\t\t\t\t\t\t\t\t\tname={`friends.${index}.email`}\n\t\t\t\t\t\t\t\t\t\t\t\t\tcomponent=\"div\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"text-danger small\"\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"col\">\n\t\t\t\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"btn btn-danger\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalues.friends\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.length > 1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn remove(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tindex\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\tX\n\t\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\tclassName=\"btn btn-warning btn-sm mt-2\"\n\t\t\t\t\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\t\t\t\t\tpush({ name: '', email: '' })\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tAdd Friend\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t)}\n\t\t\t\t\t/>\n\t\t\t\t\t<button type=\"submit\" className=\"btn btn-primary mt-2\">\n\t\t\t\t\t\tInvite\n\t\t\t\t\t</button>\n\t\t\t\t\t<FriendArrayErrors errors={errors} />\n\t\t\t\t\t{/* <p>{JSON.stringify(errors, null, 2)}</p>\n                                    <p>{JSON.stringify(values, null, 2)}</p> */}\n\t\t\t\t\t<Debug />\n\t\t\t\t</Form>\n\t\t\t)}\n\t\t</Formik>\n\t\t<Line />\n\t</>\n);\n\nexport default Arrays;\n","import React from 'react';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport { Debug } from './Debug';\nimport Line from './Line';\n\n// Async Validation\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst validate = values => {\n\treturn sleep(300).then(res => {\n\t\tconsole.log(res);\n\t\tlet errors = {};\n\n\t\tif (['admin', 'null', 'god'].includes(values.username)) {\n\t\t\terrors.username = 'Nice try';\n\t\t}\n\n\t\tif (!values.username) {\n\t\t\terrors.username = 'Required';\n\t\t}\n\n\t\tif (Object.keys(errors).length) {\n\t\t\tthrow errors;\n\t\t}\n\t});\n};\n\nconst handleOnSubmit = (values, { setSubmitting, resetForm }) => {\n\tconsole.log('handleOnSubmit');\n\tconsole.log({ values });\n\tsleep(500).then(() => {\n\t\talert(JSON.stringify(values, null, 2));\n\t\tresetForm();\n\t\tsetSubmitting(false);\n\t});\n};\n\nconst initialValues = {\n\tusername: undefined,\n};\n\nconst Username = () => (\n\t<>\n\t\t<h3 className=\"AsyncValidation\">AsyncValidation Pick a username</h3>\n\t\t<Formik\n\t\t\tinitialValues={initialValues}\n\t\t\tvalidate={validate}\n\t\t\tonSubmit={handleOnSubmit}\n\t\t>\n\t\t\t{({ isSubmitting, handleReset, errors, touched }) => (\n\t\t\t\t<Form>\n\t\t\t\t\t<label htmlFor=\"username\">Username</label>\n\t\t\t\t\t<Field\n\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\tname=\"username\"\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t/>\n\t\t\t\t\t<ErrorMessage\n\t\t\t\t\t\tclassName=\"text-danger small\"\n\t\t\t\t\t\tcomponent=\"div\"\n\t\t\t\t\t\tname=\"username\"\n\t\t\t\t\t/>\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName=\"btn btn-primary m-2\"\n\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\tdisabled={isSubmitting}\n\t\t\t\t\t>\n\t\t\t\t\t\tSubmit\n\t\t\t\t\t</button>\n\t\t\t\t\t<button\n\t\t\t\t\t\ttype=\"reset\"\n\t\t\t\t\t\tclassName=\"btn btn-warning m-2\"\n\t\t\t\t\t\tdisabled={isSubmitting}\n\t\t\t\t\t\tonClick={handleReset}\n\t\t\t\t\t>\n\t\t\t\t\t\tReset\n\t\t\t\t\t</button>\n\t\t\t\t\t<Debug />\n\t\t\t\t</Form>\n\t\t\t)}\n\t\t</Formik>\n\t\t<Line />\n\t</>\n);\n\nexport default Username;\n","import React from 'react';\nimport { Formik, Field, Form } from 'formik';\nimport { Debug } from './Debug';\nimport Line from './Line';\n\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst CheckboxExample = () => (\n\t<>\n\t\t<h3>Checkboxes</h3>\n\t\t<p>\n\t\t\tThis example demonstrates how to properly create checkboxes with\n\t\t\tFormik.\n\t\t</p>\n\t\t<Formik\n\t\t\tinitialValues={{\n\t\t\t\tisAwesome: false,\n\t\t\t\tterms: false,\n\t\t\t\tnewsletter: false,\n\t\t\t\tjobType: ['founder'],\n\t\t\t\tlocation: [],\n\t\t\t}}\n\t\t\tonSubmit={async values => {\n\t\t\t\tawait sleep(1000);\n\t\t\t\talert(JSON.stringify(values, null, 2));\n\t\t\t}}\n\t\t>\n\t\t\t{({\n\t\t\t\tisSubmitting,\n\t\t\t\tgetFieldProps,\n\t\t\t\thandleChange,\n\t\t\t\thandleBlur,\n\t\t\t\tvalues,\n\t\t\t}) => (\n\t\t\t\t<Form>\n\t\t\t\t\t{/*\n            This first checkbox will result in a boolean value being stored.\n          */}\n\t\t\t\t\t<div className=\"label\">Basic Info</div>\n\t\t\t\t\t<label>\n\t\t\t\t\t\t<Field\n\t\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\tname=\"isAwesome\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\tAre you awesome?\n\t\t\t\t\t</label>\n\t\t\t\t\t{/*\n            Multiple checkboxes with the same name attribute, but different\n            value attributes will be considered a \"checkbox group\". Formik will automagically\n            bind the checked values to a single array for your benefit. All the add and remove\n            logic will be taken care of for you.\n          */}\n\t\t\t\t\t<div className=\"label\">\n\t\t\t\t\t\tWhat best describes you? (check all that apply)\n\t\t\t\t\t</div>\n\t\t\t\t\t<label>\n\t\t\t\t\t\t<Field\n\t\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\tname=\"jobType\"\n\t\t\t\t\t\t\tvalue=\"designer\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\tDesigner |\n\t\t\t\t\t</label>\n\t\t\t\t\t<label>\n\t\t\t\t\t\t<Field\n\t\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\tname=\"jobType\"\n\t\t\t\t\t\t\tvalue=\"developer\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\tDeveloper |\n\t\t\t\t\t</label>\n\t\t\t\t\t<label>\n\t\t\t\t\t\t<Field\n\t\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\tname=\"jobType\"\n\t\t\t\t\t\t\tvalue=\"product\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\tProduct Manager |\n\t\t\t\t\t</label>\n\t\t\t\t\t{/*\n          You do not _need_ to use <Field>/useField to get this behaviorr,\n          using handleChange, handleBlur, and values works as well.\n          */}\n\t\t\t\t\t<label>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\t\tname=\"jobType\"\n\t\t\t\t\t\t\tvalue=\"founder\"\n\t\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t\t\tonBlur={handleBlur}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\tCEO / Founder\n\t\t\t\t\t</label>\n\t\t\t\t\t{/* checked={values.jobType.includes('founder')} */}\n\n\t\t\t\t\t{/*\n          The <select> element will also behave the same way if\n          you pass `multiple` prop to it.\n          */}\n\t\t\t\t\t<label htmlFor=\"location\">Where do you work?</label>\n\t\t\t\t\t<Field\n\t\t\t\t\t\tcomponent=\"select\"\n\t\t\t\t\t\tid=\"location\"\n\t\t\t\t\t\tname=\"location\"\n\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<option value=\"NY\">New York</option>\n\t\t\t\t\t\t<option value=\"SF\">San Francisco</option>\n\t\t\t\t\t\t<option value=\"CH\">Chicago</option>\n\t\t\t\t\t\t<option value=\"OTHER\">Other</option>\n\t\t\t\t\t</Field>\n\t\t\t\t\t<label>\n\t\t\t\t\t\t<Field type=\"checkbox\" name=\"terms\" />I accept the terms\n\t\t\t\t\t\tand conditions.\n\t\t\t\t\t</label>\n\t\t\t\t\t{/* Here's how you can use a checkbox to show / hide another field */}\n\t\t\t\t\t{!!values.terms ? (\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<label>\n\t\t\t\t\t\t\t\t<Field type=\"checkbox\" name=\"newsletter\" />\n\t\t\t\t\t\t\t\tSend me the newsletter{' '}\n\t\t\t\t\t\t\t\t<em style={{ color: 'rebeccapurple' }}>\n\t\t\t\t\t\t\t\t\t(This is only shown if terms = true)\n\t\t\t\t\t\t\t\t</em>\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t) : null}\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName=\"btn btn-primary mt-2\"\n\t\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\t\tdisabled={isSubmitting}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tSubmit\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t\t<Debug />\n\t\t\t\t</Form>\n\t\t\t)}\n\t\t</Formik>\n\t\t<Line />\n\t</>\n);\n\nexport default CheckboxExample;\n","import React from 'react';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { Debug } from './Debug';\nimport Line from './Line';\n\nconst Schema = Yup.object().shape({\n\temail2: Yup.string().required('email2 is required'),\n});\n\n// Async Validation\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst validate = values => console.log({ values });\n\nconst isRequired = message => value => (!!value ? undefined : message);\n\nconst FieldLevelValidation = () => (\n\t<>\n\t\t<h3 className=\"CombinedValidations\">\n\t\t\tCombinedValidations Pick a username2\n\t\t</h3>\n\t\t<Formik\n\t\t\tvalidationSchema={Schema}\n\t\t\tvalidate={validate}\n\t\t\tinitialValues={{\n\t\t\t\tusername2: undefined,\n\t\t\t\temail2: undefined,\n\t\t\t\tzip2: undefined,\n\t\t\t}}\n\t\t\tonSubmit={values => {\n\t\t\t\tsleep(500).then(() => {\n\t\t\t\t\talert(JSON.stringify(values, null, 2));\n\t\t\t\t});\n\t\t\t}}\n\t\t>\n\t\t\t{() => (\n\t\t\t\t<Form>\n\t\t\t\t\t<label htmlFor=\"username2\">username2</label>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<Field\n\t\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\t\tname=\"username2\"\n\t\t\t\t\t\t\tvalidate={isRequired('username2 is required')}\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tplaceholder=\"username2\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<ErrorMessage\n\t\t\t\t\t\t\tdata-testid=\"username2Error\"\n\t\t\t\t\t\t\tclassName=\"text-danger small\"\n\t\t\t\t\t\t\tcomponent=\"div\"\n\t\t\t\t\t\t\tname=\"username2\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<br />\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<Field\n\t\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\t\tname=\"email2\"\n\t\t\t\t\t\t\tvalidate={isRequired('email2 is required')}\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tplaceholder=\"email\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<ErrorMessage\n\t\t\t\t\t\t\tdata-testid=\"email2Error\"\n\t\t\t\t\t\t\tclassName=\"text-danger small\"\n\t\t\t\t\t\t\tcomponent=\"div\"\n\t\t\t\t\t\t\tname=\"email2\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<br />\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<Field\n\t\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\t\tname=\"zip2\"\n\t\t\t\t\t\t\tvalidate={isRequired('zip2 is required')}\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tplaceholder=\"zip2\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<ErrorMessage\n\t\t\t\t\t\t\tdata-testid=\"zip2Error\"\n\t\t\t\t\t\t\tclassName=\"text-danger small\"\n\t\t\t\t\t\t\tcomponent=\"div\"\n\t\t\t\t\t\t\tname=\"zip2\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<br />\n\t\t\t\t\t<button\n\t\t\t\t\t\tdata-testid=\"CombinedValidationsBtn\"\n\t\t\t\t\t\tclassName=\"btn btn-primary m-2\"\n\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t>\n\t\t\t\t\t\tSubmit\n\t\t\t\t\t</button>\n\t\t\t\t\t<Debug />\n\t\t\t\t</Form>\n\t\t\t)}\n\t\t</Formik>\n\t\t<Line />\n\t</>\n);\n\nexport default FieldLevelValidation;\n","// https://github.com/jaredpalmer/formik/blob/master/examples/CustomInputs.js\n\n// in this component Fieldset concept is used to group the Field label and errormessage\n\nimport React from 'react';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { Debug } from './Debug';\nimport Line from './Line';\n\n// By combining a vanilla <label> plus Formik's <Field> and <ErrorMessage>,\n// we can abstract a generic \"Fieldset\" component for most of our inputs.\nconst Fieldset = ({ name, label, ...rest }) => (\n\t<div className=\"form-group\">\n\t\t<label htmlFor={name}>{label}</label>\n\t\t<Field id={name} name={name} {...rest} />\n\t\t<ErrorMessage\n\t\t\tname={name}\n\t\t\tclassName=\"text-danger small\"\n\t\t\tcomponent=\"div\"\n\t\t/>\n\t</div>\n);\n\nconst initialValues = {\n\temail: 'vigneshwaran@chandrasekaran.com',\n\tcolor: 'red',\n\tanimal: undefined,\n\twebsite: 'https://github.com/vigneshwaran-chandrasekaran',\n};\n\nconst validationSchema = Yup.object().shape({\n\temail: Yup.string()\n\t\t.email('Invalid email address')\n\t\t.required('Required'),\n\tcolor: Yup.string().required('Required'),\n\twebsite: Yup.string()\n\t\t.url('Invalid URL')\n\t\t.required('Required'),\n\tanimal: Yup.string().required('Required'),\n});\n\nfunction onSubmitHandle(values) {\n\tconsole.log('onSubmitHandle');\n\tconsole.log({ values });\n\tsetTimeout(() => {\n\t\talert(JSON.stringify(values, null, 2));\n\t}, 500);\n}\n\n// on component load list of values\n// we can get this details from api call also\nconst animalsList = [\n\t{\n\t\tid: 1,\n\t\tvalue: 'Tiger',\n\t},\n\t{\n\t\tid: 2,\n\t\tvalue: 'Lion',\n\t},\n\t{\n\t\tid: 3,\n\t\tvalue: 'Dog',\n\t},\n\t{\n\t\tid: 4,\n\t\tvalue: 'Cat',\n\t},\n];\n\n// generage select dropdown option list dynamically\nfunction Options({ options }) {\n\treturn options.map(option => (\n\t\t<option key={option.id} value={option.value}>\n\t\t\t{option.value}\n\t\t</option>\n\t));\n}\n\nconst CustomInputs = () => (\n\t<>\n\t\t<h3 className=\"text-center mb-3\">\n\t\t\t(CustomInputs) Grouping fields, dynamic select options\n\t\t</h3>\n\t\t<Formik\n\t\t\tinitialValues={initialValues}\n\t\t\tvalidationSchema={validationSchema}\n\t\t\tonSubmit={onSubmitHandle}\n\t\t>\n\t\t\t{({ isSubmitting, handleReset }) => (\n\t\t\t\t<Form>\n\t\t\t\t\t<Fieldset\n\t\t\t\t\t\tname=\"email1\"\n\t\t\t\t\t\ttype=\"email\"\n\t\t\t\t\t\tlabel=\"Email\"\n\t\t\t\t\t\tplaceholder=\"jane@acme.com\"\n\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t/>\n\t\t\t\t\t<Fieldset\n\t\t\t\t\t\tname=\"color\"\n\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\tlabel=\"Favorite Color\"\n\t\t\t\t\t\tcomponent=\"select\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<option value=\"\">Select a Color</option>\n\t\t\t\t\t\t<option value=\"red\">Red</option>\n\t\t\t\t\t\t<option value=\"green\">Green</option>\n\t\t\t\t\t\t<option value=\"blue\">Blue</option>\n\t\t\t\t\t</Fieldset>\n\n\t\t\t\t\t<Fieldset\n\t\t\t\t\t\tname=\"website\"\n\t\t\t\t\t\ttype=\"url\"\n\t\t\t\t\t\tlabel=\"Website\"\n\t\t\t\t\t\tplaceholder=\"https://example.com\"\n\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t/>\n\n\t\t\t\t\t<Fieldset\n\t\t\t\t\t\tname=\"animal\"\n\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\tas=\"select\"\n\t\t\t\t\t\tlabel=\"Favorite Animal\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<option value=\"\">Select an animal</option>\n\t\t\t\t\t\t<option value=\"tiger\">Tiger</option>\n\t\t\t\t\t\t<option value=\"bear\">Bear</option>\n\t\t\t\t\t\t<option value=\"shark\">Shark</option>\n\t\t\t\t\t\t<Options options={animalsList} />\n\t\t\t\t\t</Fieldset>\n\n\t\t\t\t\t<button\n\t\t\t\t\t\ttype=\"reset\"\n\t\t\t\t\t\tclassName=\"btn btn-warning m-2\"\n\t\t\t\t\t\tdisabled={isSubmitting}\n\t\t\t\t\t\tonClick={handleReset}\n\t\t\t\t\t>\n\t\t\t\t\t\tReset\n\t\t\t\t\t</button>\n\n\t\t\t\t\t<button type=\"submit\" className=\"btn btn-primary m-2\">\n\t\t\t\t\t\tSubmit\n\t\t\t\t\t</button>\n\n\t\t\t\t\t<Debug />\n\t\t\t\t</Form>\n\t\t\t)}\n\t\t</Formik>\n\t\t<Line />\n\t</>\n);\n\nexport default CustomInputs;\n","import React from \"react\";\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport { Debug } from \"./Debug\";\nimport Line from \"./Line\";\n\n// While you can use any validation library (or write you own), Formik\n// comes with special support for Yup by @jquense. It has a builder API like\n// React PropTypes / Hapi.js's Joi. You can define these inline or, you may want\n// to keep them separate so you can reuse schemas (e.g. address) across your application.\nconst SignUpSchema = Yup.object().shape({\n  email: Yup.string()\n    .email(\"Invalid email address\")\n    .required(\"Required\"),\n  firstName: Yup.string()\n    .min(2, \"Must be longer than 2 characters\")\n    .max(20, \"Nice try, nobody has a first name that long\")\n    .required(\"Required\"),\n  lastName: Yup.string()\n    .min(5, \"Must be longer than 5 characters\")\n    .max(10, \"Nice try, nobody has a last name that long\")\n    .required(\"Required\")\n});\n\n// <ErrorMessage /> will ONLY render when a field has an error and has been touched.\nconst SignUp = () => (\n  <>\n    <h3>(ErrorMessage) Sign up</h3>\n    <Formik\n      initialValues={{\n        email: \"\",\n        firstName: \"\",\n        lastName: \"\"\n      }}\n      validationSchema={SignUpSchema}\n      onSubmit={values => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n        }, 500);\n      }}\n    >\n      {() => (\n        <Form>\n          <label htmlFor=\"firstName\">First Name</label>\n          <Field\n            className=\"form-control\"\n            name=\"firstName\"\n            placeholder=\"Jane\"\n            type=\"text\"\n          />\n          <ErrorMessage\n            name=\"firstName\"\n            component=\"div\"\n            className=\"text-danger small\"\n          />\n\n          <label htmlFor=\"lastName\">Last Name</label>\n          <Field\n            className=\"form-control\"\n            name=\"lastName\"\n            placeholder=\"Doe\"\n            type=\"text\"\n          />\n          {/* this bellow error message is different between other error message component\n          here we can add our own new elements */}\n          <ErrorMessage name=\"lastName\">\n            {(msg /** this is the same as the above */) => (\n              <>\n                <div className=\"text-danger small\">{msg}</div>\n                <div className=\"text-success small\">Always shows</div>\n              </>\n            )}\n          </ErrorMessage>\n\n          <label htmlFor=\"email\">Email</label>\n          <Field\n            className=\"form-control\"\n            name=\"email\"\n            placeholder=\"jane@acme.com\"\n            type=\"email\"\n          />\n          {/* This will render a string */}\n          <ErrorMessage name=\"email\" className=\"text-danger small\" />\n\n          <button className=\"btn btn-primary m-2\" type=\"submit\">\n            Submit\n          </button>\n          <Debug />\n        </Form>\n      )}\n    </Formik>\n    <Line />\n  </>\n);\n\nexport default SignUp;\n","import React from \"react\";\nimport { Formik, FastField, Field, Form } from \"formik\";\nimport { Debug } from \"./Debug\";\nimport Line from \"./Line\";\n\nclass Input extends React.Component {\n  renders = 0;\n  render() {\n    return (\n      <div>\n        <input {...this.props} />\n        <p># of renders: {this.renders++}</p>\n      </div>\n    );\n  }\n}\n\n/**\n * https://jaredpalmer.com/formik/docs/api/fastfield\n *\n * <FastField /> is an optimized version of <Field /> meant to be\n * used on large forms (~30+ fields) or when a field has very\n * expensive validation requirements. <FastField /> has the\n * same exact API as <Field>, but implements shouldComponentUpdate()\n * internally to block all additional re-renders unless there\n * are direct updates to the <FastField />'s relevant parts/slice\n * of Formik state.\n */\n\nconst Basic = () => (\n  <>\n    <h3>(FastField) Sign Up</h3>\n    <Formik\n      initialValues={{\n        firstName: \"\",\n        lastName: \"\",\n        email: \"\",\n        field: \"\"\n      }}\n      onSubmit={(values, { setSubmitting }) => {\n        setTimeout(() => {\n          setSubmitting(false);\n\n          alert(JSON.stringify(values, null, 2));\n        }, 500);\n      }}\n    >\n      {({ isSubmitting }) => (\n        <Form>\n          <label htmlFor=\"firstName\">First Name</label>\n          <FastField\n            className=\"form-control\"\n            name=\"firstName\"\n            placeholder=\"Jane\"\n            as={Input}\n            disabled={isSubmitting}\n          />\n\n          <label htmlFor=\"lastName\">Last Name</label>\n          <FastField\n            className=\"form-control\"\n            name=\"lastName\"\n            placeholder=\"Doe\"\n            as={Input}\n            disabled={isSubmitting}\n          />\n\n          <label htmlFor=\"email\">Email</label>\n          <FastField\n            className=\"form-control\"\n            name=\"email3\"\n            placeholder=\"jane@acme.com\"\n            type=\"email\"\n            as={Input}\n            disabled={isSubmitting}\n          />\n\n          <label htmlFor=\"field\">First Name</label>\n          <Field\n            className=\"form-control\"\n            name=\"field\"\n            placeholder=\"field\"\n            type=\"text\"\n            disabled={isSubmitting}\n          />\n\n          <button className=\"btn btn-primary m-2\" type=\"submit\">\n            Submit\n          </button>\n          <Debug />\n        </Form>\n      )}\n    </Formik>\n    <Line />\n  </>\n);\n\nexport default Basic;\n","import React from \"react\";\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport { Debug } from \"./Debug\";\nimport Line from \"./Line\";\n\nconst isRequired = message => value => (!!value ? undefined : message);\n\n/**\n * In this example\n * setFieldTouched = is used to programmatically touch the field\n * setFieldValue = is used to set value to filed programmatically\n * validateField = validate single filed based on input key value\n */\n\nconst FieldLevelValidation = () => (\n  <>\n    <h3>(FieldLevelValidation) Pick a username</h3>\n    <Formik\n      initialValues={{ username: \"\", email: \"\" }}\n      onSubmit={values => {\n        alert(JSON.stringify(values, null, 2));\n      }}\n    >\n      {({\n        errors,\n        touched,\n        setFieldValue,\n        setFieldTouched,\n        validateField,\n        validateForm\n      }) => (\n        <Form>\n          <label htmlFor=\"username\">Username</label>\n          <div>\n            <Field\n              className=\"form-control\"\n              name=\"username\"\n              validate={isRequired(\"This field is required\")}\n              type=\"text\"\n              placeholder=\"Username\"\n            />\n            <ErrorMessage\n              className=\"text-danger small\"\n              name=\"username\"\n              component=\"div\"\n            />\n          </div>\n          <br />\n          <div>\n            <Field\n              className=\"form-control\"\n              name=\"email\"\n              validate={isRequired(\"This field is required\")}\n              type=\"text\"\n              placeholder=\"Email\"\n            />\n            <ErrorMessage\n              className=\"text-danger small\"\n              name=\"email\"\n              component=\"div\"\n            />\n          </div>\n\n          <div className=\"mt-4\">\n            <div>username field actions</div>\n            <button\n              className=\"btn btn-primary mr-2\"\n              type=\"button\"\n              onClick={() => {\n                setFieldTouched(\"username\", true, true);\n              }}\n            >\n              setFieldTouched\n            </button>\n            <button\n              className=\"btn btn-primary mr-2\"\n              type=\"button\"\n              onClick={() => {\n                setFieldValue(\"username\", \"\", true);\n              }}\n            >\n              setFieldValue\n            </button>\n            <button\n              className=\"btn btn-primary mr-2\"\n              type=\"button\"\n              onClick={() => {\n                validateField(\"username\");\n              }}\n            >\n              validateField\n            </button>\n            <br />\n          </div>\n          <br />\n          <div>\n            <div>Form actions</div>\n            <button\n              className=\"btn btn-primary mr-2\"\n              type=\"button\"\n              onClick={validateForm}\n            >\n              validate form\n            </button>\n            <button className=\"btn btn-primary\" type=\"submit\">\n              Submit\n            </button>\n          </div>\n          <Debug />\n        </Form>\n      )}\n    </Formik>\n    <Line />\n  </>\n);\n\nexport default FieldLevelValidation;\n","import React from \"react\";\nimport { Formik, Field, FastField, Form } from \"formik\";\nimport * as Yup from \"yup\";\nimport Line from \"./Line\";\n\nclass Input extends React.Component {\n  renders = 0;\n  render() {\n    return (\n      <div>\n        <input {...this.props} />\n        <p># of renders: {this.renders++}</p>\n      </div>\n    );\n  }\n}\n\nconst Basic = () => (\n  <>\n    <h3>(FastFieldWebExample) Sign Up</h3>\n    <Formik\n      initialValues={{\n        firstName: \"\",\n        lastName: \"\",\n        email: \"\"\n      }}\n      validationSchema={Yup.object().shape({\n        firstName: Yup.string().required(),\n        middleInitial: Yup.string(),\n        lastName: Yup.string().required(),\n        email: Yup.string()\n          .email()\n          .required()\n      })}\n      onSubmit={values => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n        }, 500);\n      }}\n    >\n      {({ errors, touched, form }) => (\n        <Form>\n          {/** This <FastField> only updates for changes made to\n           values.firstName, touched.firstName, errors.firstName */}\n          <label htmlFor=\"firstName\">First Name</label>\n          <FastField\n            className=\"form-control\"\n            name=\"firstName\"\n            placeholder=\"Weezy\"\n            component={Input}\n          />\n\n          {/** Updates for all changes because it's from the\n           top-level formikProps which get all updates */}\n          {touched.firstName && errors.firstName && (\n            <div>{errors.firstName}</div>\n          )}\n\n          <label htmlFor=\"middleInitial\">Middle Initial</label>\n          <FastField\n            className=\"form-control\"\n            name=\"middleInitial\"\n            placeholder=\"F\"\n            render={({ field, form }) => (\n              <div>\n                <input {...field} />\n                {/**\n                 * This updates normally because it's from the same slice of Formik state,\n                 * i.e. path to the object matches the name of this <FastField />\n                 */}\n                {form.touched.middleInitial ? form.errors.middleInitial : null}\n\n                {/** This won't ever update since it's coming from\n                 from another <Field>/<FastField>'s (i.e. firstName's) slice   */}\n                {form.touched.firstName && form.errors.firstName\n                  ? form.errors.firstName\n                  : null}\n\n                {/* This doesn't update either */}\n                {form.submitCount}\n\n                {/* Imperative methods still work as expected */}\n                <button\n                  className=\"btn btn-warning\"\n                  type=\"button\"\n                  onClick={form.setFieldValue(\"middleInitial\", \"J\")}\n                >\n                  J\n                </button>\n              </div>\n            )}\n          />\n\n          {/** Updates for all changes to Formik state\n           and all changes by all <Field>s and <FastField>s */}\n          <label htmlFor=\"lastName\">LastName</label>\n          <Field\n            className=\"form-control\"\n            name=\"lastName\"\n            placeholder=\"Baby\"\n            render={({ field, form }) => (\n              <div>\n                <input {...field} />\n                {/** Works because this is inside\n                 of a <Field/>, which gets all updates */}\n                {form.touched.firstName && form.errors.firstName\n                  ? form.errors.firstName\n                  : null}\n              </div>\n            )}\n          />\n\n          {/** Updates for all changes to Formik state and\n           all changes by all <Field>s and <FastField>s */}\n          <label htmlFor=\"email\">Email</label>\n          <Field\n            className=\"form-control\"\n            name=\"email\"\n            placeholder=\"jane@acme.com\"\n            type=\"email\"\n          />\n\n          <button className=\"btn btn-primary m-2\" type=\"submit\">\n            Submit\n          </button>\n        </Form>\n      )}\n    </Formik>\n    <Line />\n  </>\n);\n\nexport default Basic;\n","import React from \"react\";\nimport { Formik, Field, ErrorMessage } from \"formik\";\nimport { Debug } from \"./Debug\";\nimport Line from \"./Line\";\n\n/**\n * In this example\n * we have done multi section form\n * used two sections\n */\n\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst required = value => (value ? undefined : \"Required\");\n\nclass Wizard extends React.Component {\n  static Page = ({ children }) => children;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      page: 0,\n      values: props.initialValues\n    };\n  }\n\n  next = values =>\n    this.setState(state => ({\n      page: Math.min(state.page + 1, this.props.children.length - 1),\n      values\n    }));\n\n  previous = () =>\n    this.setState(state => ({\n      page: Math.max(state.page - 1, 0)\n    }));\n\n  validate = values => {\n    const activePage = React.Children.toArray(this.props.children)[\n      this.state.page\n    ];\n    return activePage.props.validate ? activePage.props.validate(values) : {};\n  };\n\n  handleSubmit = (values, bag) => {\n    const { children, onSubmit } = this.props;\n    const { page } = this.state;\n    const isLastPage = page === React.Children.count(children) - 1;\n    if (isLastPage) {\n      return onSubmit(values, bag);\n    } else {\n      bag.setTouched({});\n      bag.setSubmitting(false);\n      this.next(values);\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    const { page, values } = this.state;\n    const activePage = React.Children.toArray(children)[page];\n    const isLastPage = page === React.Children.count(children) - 1;\n    return (\n      <Formik\n        initialValues={values}\n        enableReinitialize={false}\n        validate={this.validate}\n        onSubmit={this.handleSubmit}\n      >\n        {({ values, handleSubmit, isSubmitting, handleReset }) => (\n          <form onSubmit={handleSubmit}>\n            {activePage}\n            <div className=\"buttons\">\n              {page > 0 && (\n                <button\n                  type=\"button\"\n                  className=\"btn btn-primary secondary mt-2\"\n                  onClick={this.previous}\n                >\n                  « Previous\n                </button>\n              )}\n\n              {!isLastPage && (\n                <button type=\"submit\" className=\"btn btn-primary mt-2\">\n                  Next »\n                </button>\n              )}\n              {isLastPage && (\n                <button\n                  className=\"btn btn-success ml-2 mt-2\"\n                  type=\"submit\"\n                  disabled={isSubmitting}\n                >\n                  Submit\n                </button>\n              )}\n            </div>\n\n            <Debug />\n          </form>\n        )}\n      </Formik>\n    );\n  }\n}\n\nconst App = () => (\n  <div className=\"App\">\n    <h3>(MultistepWizard) Multistep / Form Wizard </h3>\n    <Wizard\n      initialValues={{\n        firstName: \"\",\n        lastName: \"\",\n        email: \"\",\n        favoriteColor: \"\"\n      }}\n      onSubmit={(values, actions) => {\n        sleep(300).then(() => {\n          window.alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        });\n      }}\n    >\n      <Wizard.Page>\n        <div>\n          <label>First Name</label>\n          <Field\n            className=\"form-control\"\n            name=\"firstName\"\n            component=\"input\"\n            type=\"text\"\n            placeholder=\"First Name\"\n            validate={required}\n          />\n          <ErrorMessage\n            name=\"firstName\"\n            component=\"div\"\n            className=\"text-danger small\"\n          />\n        </div>\n        <div>\n          <label>Last Name</label>\n          <Field\n            className=\"form-control\"\n            name=\"lastName\"\n            component=\"input\"\n            type=\"text\"\n            placeholder=\"Last Name\"\n            validate={required}\n          />\n          <ErrorMessage\n            name=\"lastName\"\n            component=\"div\"\n            className=\"text-danger small\"\n          />\n        </div>\n      </Wizard.Page>\n      <Wizard.Page\n        validate={values => {\n          const errors = {};\n          if (!values.email) {\n            errors.email = \"Required\";\n          }\n          if (!values.favoriteColor) {\n            errors.favoriteColor = \"Required\";\n          }\n          return errors;\n        }}\n      >\n        <div>\n          <label>Email</label>\n          <Field\n            className=\"form-control\"\n            name=\"email\"\n            component=\"input\"\n            type=\"email\"\n            placeholder=\"Email\"\n          />\n          <ErrorMessage\n            name=\"email\"\n            component=\"div\"\n            className=\"text-danger small\"\n          />\n        </div>\n        <div>\n          <label>Favorite Color</label>\n          <Field\n            name=\"favoriteColor\"\n            component=\"select\"\n            className=\"form-control\"\n          >\n            <option value=\"\">Select a Color</option>\n            <option value=\"#ff0000\">❤️ Red</option>\n            <option value=\"#00ff00\">💚 Green</option>\n            <option value=\"#0000ff\">💙 Blue</option>\n          </Field>\n          <ErrorMessage\n            name=\"favoriteColor\"\n            component=\"div\"\n            className=\"text-danger small\"\n          />\n        </div>\n      </Wizard.Page>\n    </Wizard>\n    <Line />\n  </div>\n);\n\nexport default App;\n","import React from \"react\";\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport { Debug } from \"./Debug\";\nimport Line from \"./Line\";\n\n// While you can use any validation library (or write you own), Formik\n// comes with special support for Yup by @jquense. It has a builder API like\n// React PropTypes / Hapi.js's Joi. You can define these inline or, you may want\n// to keep them separate so you can reuse schemas (e.g. address) across your application.\nconst SignUpSchema = Yup.object().shape({\n  email: Yup.string()\n    .email(\"Invalid email address\")\n    .required(\"Required\"),\n  firstName: Yup.string()\n    .min(2, \"Must be longer than 2 characters\")\n    .max(20, \"Nice try, nobody has a first name that long\")\n    .required(\"Required\"),\n  lastName: Yup.string()\n    .min(2, \"Must be longer than 2 characters\")\n    .max(20, \"Nice try, nobody has a last name that long\")\n    .required(\"Required\")\n});\n\nconst SignUp = () => (\n  <>\n    <h3>(SchemaValidation) Sign up </h3>\n    <Formik\n      initialValues={{\n        email: \"\",\n        firstName: \"\",\n        lastName: \"\"\n      }}\n      validationSchema={SignUpSchema}\n      onSubmit={values => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n        }, 500);\n      }}\n    >\n      {() => (\n        <Form>\n          <label htmlFor=\"firstName\">First Name</label>\n          <Field\n            className=\"form-control\"\n            name=\"firstName\"\n            placeholder=\"Jane\"\n            type=\"text\"\n          />\n\n          <ErrorMessage\n            name=\"firstName\"\n            component=\"div\"\n            className=\"text-danger small\"\n          />\n\n          <label htmlFor=\"lastName\">Last Name</label>\n          <Field\n            className=\"form-control\"\n            name=\"lastName\"\n            placeholder=\"Doe\"\n            type=\"text\"\n          />\n          <ErrorMessage\n            name=\"lastName\"\n            component=\"div\"\n            className=\"text-danger small\"\n          />\n\n          <label htmlFor=\"email\">Email</label>\n          <Field\n            className=\"form-control\"\n            name=\"email\"\n            placeholder=\"jane@acme.com\"\n            type=\"email\"\n          />\n          <ErrorMessage\n            name=\"email\"\n            component=\"div\"\n            className=\"text-danger small\"\n          />\n\n          <button className=\"btn btn-primary secondary mt-2\" type=\"submit\">\n            Submit\n          </button>\n          <Debug />\n        </Form>\n      )}\n    </Formik>\n    <Line />\n  </>\n);\n\nexport default SignUp;\n","import React from \"react\";\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport { Debug } from \"./Debug\";\nimport Line from \"./Line\";\n\nconst validate = values => {\n  let errors = {};\n  if (!values.email) {\n    errors.email = \"Required\";\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = \"Invalid email address\";\n  }\n  return errors;\n};\n\nconst SignIn = () => (\n  <>\n    <h1>(SyncValidation) Sign In</h1>\n    <Formik\n      initialValues={{\n        email: \"\",\n        password: \"\"\n      }}\n      validate={validate}\n      onSubmit={values => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n        }, 500);\n      }}\n    >\n      {() => (\n        <Form>\n          <label htmlFor=\"email\">Email</label>\n          <Field\n            className=\"form-control\"\n            name=\"email\"\n            placeholder=\"john@acme.com\"\n            type=\"email\"\n          />\n          <div className=\"field-error\">\n            <ErrorMessage\n              name=\"email\"\n              component=\"div\"\n              className=\"text-danger small\"\n            />\n          </div>\n          <label htmlFor=\"password\">Password</label>\n          <Field className=\"form-control\" name=\"password\" type=\"password\" />\n          <button className=\"btn btn-primary secondary mt-2\" type=\"submit\">\n            Sign In\n          </button>\n          <Debug />\n        </Form>\n      )}\n    </Formik>\n    <Line />\n  </>\n);\n\nexport default SignIn;\n","import React from 'react';\nimport { withFormik, Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { Debug } from './Debug';\nimport Line from './Line';\n\nconst FormOne = ({\n    values,\n    errors,\n    touched,\n    isSubmitting\n}) => {\n    return (\n        <>\n            <h3>(FormOne)</h3>\n            <Form>\n                <div className=\"form-group\">\n                    <label htmlFor=\"email\">Email address:</label>\n                    <Field\n                        type=\"email\"\n                        className=\"form-control\"\n                        id=\"email\"\n                        name=\"email\"\n                    />\n                    {touched.email && errors.email && <div className='text-danger small my-2'>{errors.email}</div>}\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"pwd\">Password:</label>\n                    <Field\n                        type=\"password\"\n                        className=\"form-control\"\n                        id=\"pwd\"\n                        name=\"password\"\n                    />\n                    {touched.password && errors.password && <div className='text-danger small my-2'>{errors.password}</div>}\n                </div>\n                <div className=\"form-group form-check\">\n                    <label className=\"form-check-label\">\n                        <Field\n                            className=\"form-check-input\"\n                            type=\"checkbox\"\n                            name=\"newsletter\"\n                            checked={values.newsletter}\n                        />\n                        <span> I agree your condition.</span>\n                    </label>\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"sel1\">Select list:</label>\n                    <Field component=\"select\" name=\"plan\" className=\"form-control\" id=\"sel1\">\n                        <option value=''>Select your plan</option>\n                        <option value='1'>1</option>\n                        <option value='2'>2</option>\n                        <option value='3'>3</option>\n                        <option value='4'>4</option>\n                    </Field>\n                </div>\n                {touched.plan && errors.plan && <div className='text-danger small my-2'>{errors.plan}</div>}\n                <ErrorMessage name=\"plan\" className=\"text-danger small my-2\" component='div' />\n                <button disabled={isSubmitting} type=\"submit\" className=\"btn btn-primary\">Submit</button>\n                <Debug />\n            </Form>\n            <Line />\n        </>\n    );\n}\n\nconst FormSchema = Yup.object().shape({\n    // we have added custom error messgae for email validation\n    // default email validation error message is : `email must be a valid email`\n    email: Yup.string()\n        .email('Please enter valid email')\n        .required(),\n    password: Yup.string()\n        .min(3, 'Too Short!')\n        .max(30)\n        .required(),\n    plan: Yup.string()\n        .required('Required')\n});\n\nconst FormOneFormik = withFormik({\n    mapPropsToValues({ email, password, newsletter, plan }) {\n        // if we pass props to component means we can get it in mapPropsToValues(props)\n        return {\n            email: email || 'vigneshwaran',\n            password: password || '',\n            newsletter: newsletter || false,\n            plan: plan || '2',\n        }\n    },\n    validationSchema: FormSchema,\n    handleSubmit(values, { resetForm, setErrors, setSubmitting }) {\n        console.log({ values });\n        setTimeout(() => {\n            if (values.email === 'hello@gmail.com') {\n                setErrors({\n                    email: 'Email is already taken'\n                });\n            } else {\n                resetForm();\n            }\n            setSubmitting(false);\n        }, 2000);\n    }\n})(FormOne);\n\nexport default FormOneFormik;","import React from 'react';\n\nexport default function Error({ touched, message }) {\n\tif (!touched) {\n\t\treturn <div>&nbsp;</div>;\n\t}\n\tif (message) {\n\t\treturn (\n\t\t\t<div className=\"text-danger\">\n\t\t\t\t{message}{' '}\n\t\t\t\t<span role=\"img\" aria-label=\"Emoji\">\n\t\t\t\t\t😟\n\t\t\t\t</span>\n\t\t\t</div>\n\t\t);\n\t}\n\treturn (\n\t\t<div className=\"text-success\">\n\t\t\tall good{' '}\n\t\t\t<span role=\"img\" aria-label=\"Emoji\">\n\t\t\t\t😃\n\t\t\t</span>\n\t\t</div>\n\t);\n}\n","import React, { useState } from \"react\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport Autosuggest from \"react-autosuggest\";\nimport axios from \"axios\";\nimport Error from \"./Error\";\nimport Line from \"./Line\";\n\nconst validationSchema = Yup.object().shape({\n  userName: Yup.string()\n    .min(1)\n    .max(15)\n    .required(),\n  email: Yup.string()\n    .email()\n    .min(1)\n    .max(15)\n    .required(),\n  country: Yup.string().required()\n});\n\n// initial state (starting field values)\nconst initialValues = {\n  email: \"one@g.coms\",\n  userName: \"two\",\n  country: \"\"\n};\n\nexport default function FormTwo() {\n  const [country, setCountry] = useState(\"\");\n  const [suggestions, setSuggestions] = useState([]);\n\n  function onSuggestionsClearRequested() {\n    console.log(\"hi\");\n    setSuggestions([]);\n  }\n\n  return (\n    <>\n      <h3>(FormOne)</h3>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={validationSchema}\n        onSubmit={(values, { setSubmitting, resetForm }) => {\n          console.log({ values });\n          setSubmitting(true);\n          setTimeout(() => {\n            alert(JSON.stringify(values, null, 2));\n            resetForm();\n            setSubmitting(false);\n          }, 500);\n        }}\n      >\n        {({\n          values,\n          errors,\n          touched,\n          handleChange,\n          handleBlur,\n          handleSubmit,\n          isSubmitting,\n          setFieldValue\n        }) => (\n          <form onSubmit={handleSubmit}>\n            <div className=\"form-group\">\n              <label htmlFor=\"email\">Email address:</label>\n              <input\n                type=\"email\"\n                className={\n                  \"form-control \" +\n                  (touched.email && errors.email ? \"border-danger\" : \"\")\n                }\n                id=\"email4\"\n                name=\"email4\"\n                placeholder=\"Enter your email\"\n                value={values.email}\n                onBlur={handleBlur}\n                onChange={handleChange}\n              />\n              <Error touched={touched.email} message={errors.email} />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"userName\">Name</label>\n              <input\n                type=\"text\"\n                className={\n                  \"form-control \" +\n                  (touched.userName && errors.userName ? \"border-danger\" : \"\")\n                }\n                id=\"userName\"\n                name=\"userName\"\n                placeholder=\"Enter your name\"\n                value={values.userName}\n                onBlur={handleBlur}\n                onChange={handleChange}\n              />\n              <Error touched={touched.userName} message={errors.userName} />\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"autosuggest\">Autosuggest</label>\n              <Autosuggest\n                inputProps={{\n                  value: country, // usually comes from the application state\n                  // onBlur,         // called when the input loses focus, e.g. when user presses Tab\n                  type: \"search\",\n                  placeholder: \"Enter city or postcode\",\n                  className:\n                    \"form-control \" +\n                    (touched.country && errors.country ? \"border-danger\" : \"\"),\n                  autoComplete: \"hello\",\n                  name: \"autosuggest\",\n                  id: \"autosuggest\",\n                  onChange: (_event, { newValue }) => {\n                    // called every time the input value changes\n                    console.log({ newValue });\n                    setCountry(newValue);\n                    console.log(country);\n                  }\n                }}\n                suggestions={suggestions}\n                onSuggestionsFetchRequested={async ({ value }) => {\n                  console.log({ value });\n                  if (!value) {\n                    setSuggestions([]);\n                    return;\n                  }\n\n                  try {\n                    const result = await axios.get(\n                      `https://restcountries.eu/rest/v2/name/${value}`\n                    );\n                    console.log(result.data);\n                    setSuggestions(\n                      result.data.map(row => ({\n                        name: row.name,\n                        flag: row.flag\n                      }))\n                    );\n                  } catch (error) {\n                    setSuggestions([]);\n                  }\n                }}\n                onSuggestionsClearRequested={onSuggestionsClearRequested}\n                getSuggestionValue={suggestion => {\n                  return suggestion.name;\n                }}\n                renderSuggestion={suggestion => {\n                  return (\n                    <div>\n                      <img\n                        style={{ width: \"25px\", paddingRight: \"10px\" }}\n                        src={suggestion.flag}\n                        alt={suggestion.name}\n                      />\n                      {suggestion.name}\n                    </div>\n                  );\n                }}\n                onSuggestionSelected={(\n                  event,\n                  {\n                    suggestion,\n                    suggestionValue,\n                    suggestionIndex,\n                    sectionIndex,\n                    method\n                  }\n                ) => {\n                  if (method === \"enter\") {\n                    event.preventDefault();\n                  }\n                  setCountry(suggestion.name);\n                  setFieldValue(\"country\", suggestion.name);\n                }}\n              />\n              <Error touched={touched.country} message={errors.country} />\n            </div>\n            <div>\n              <button\n                disabled={isSubmitting}\n                type=\"submit\"\n                className=\"btn btn-primary\"\n              >\n                Submit\n              </button>\n            </div>\n            {JSON.stringify(values)}\n          </form>\n        )}\n      </Formik>\n      <Line />\n    </>\n  );\n}\n","import React from 'react'\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport Line from './Line';\n\nconst FormThree = () => (\n    <>\n        <h3>(FormThree) Any place in your app!</h3>\n        <Formik\n            initialValues={{ email: '', password: '' }}\n            validate={values => {\n                let errors = {};\n                if (!values.email) {\n                    errors.email = 'Required';\n                } else if (\n                    !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\n                ) {\n                    errors.email = 'Invalid email address';\n                }\n                if (!values.password) {\n                    errors.password = 'Required';\n                }\n                return errors;\n            }}\n            onSubmit={(values, { setSubmitting }) => {\n                setTimeout(() => {\n                    alert(JSON.stringify(values, null, 2));\n                    setSubmitting(false);\n                }, 400);\n            }}\n        >\n            {({ isSubmitting }) => (\n                <Form>\n                    <Field\n                        className=\"form-control mb-2\"\n                        type=\"email\"\n                        name=\"email\"\n                        placeholder=\"email\" />\n                    <ErrorMessage className='text-danger small' name=\"email\" component=\"div\" />\n                    <Field\n                        className=\"form-control mb-2\"\n                        type=\"password\"\n                        name=\"password\"\n                        placeholder=\"password\" />\n                    <ErrorMessage className='text-danger small' name=\"password\" component=\"div\" />\n                    <button className=\"btn btn-primary m-2\" type=\"submit\" disabled={isSubmitting}>\n                        Submit\n                    </button>\n                </Form>\n            )}\n        </Formik>\n        <Line />\n    </>\n);\n\nexport default FormThree;","import React from 'react';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { Debug } from './Debug';\nimport Line from './Line';\n\n/**\n * https://codesandbox.io/s/l2r832l8x7\n *\n * https://itnext.io/simple-react-form-validation-with-formik-yup-and-or-spected-206ebe9e7dcc\n * https://www.reactnativeschool.com/build-and-validate-forms-with-formik-and-yup/checking-field-equality-confirm-password\n */\n\nconst phoneRegExp = /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/;\n\nconst users = [\n\t{ id: 1, name: 'Tamilnadu' },\n\t{ id: 2, name: 'Germany' },\n\t{ id: 3, name: 'Vigneshwaran' },\n];\n\nconst Schema = Yup.object().shape({\n\t/**\n\t * the lowercase() will not work if we don't specify string() and strict()\n\t */\n\tuserName: Yup.string()\n\t\t.strict()\n\t\t.required('No userName provided.')\n\t\t.trim('There is empty space')\n\t\t.lowercase('plese use all lowercase')\n\t\t.min(5, 'userName is too short - should be 5 chars minimum.')\n\t\t.test('checkUserNameTaken', 'Username already taken', function(value) {\n\t\t\t// https://medium.com/@arkadyt/how-does-yup-addmethod-work-creating-custom-validation-functions-with-yup-8fddb71a5470\n\t\t\treturn !users.some(user => user.name === value);\n\t\t}),\n\tpasswordConfirmation: Yup.string()\n\t\t.required('passwordConfirmation is required')\n\t\t.oneOf([Yup.ref('password'), null], 'Passwords must match'),\n\t// email: Yup.string()\n\t// \t.email()\n\t// \t.required(),\n\n\tpassword: Yup.string().required('This field is required'),\n\tchangepassword: Yup.string().when('password', {\n\t\tis: val => (val && val.length > 0 ? true : false),\n\t\tthen: Yup.string().oneOf(\n\t\t\t[Yup.ref('password')],\n\t\t\t'Both password need to be the same'\n\t\t),\n\t}),\n\tphoneNumber: Yup.string()\n\t\t.required('Phone number is required')\n\t\t.matches(phoneRegExp, 'Phone number is not valid'),\n});\n\n// Async Validation\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst validate = values => console.log({ values });\n\nconst AllInOneValidation = () => (\n\t<>\n\t\t<div className=\"container\">\n\t\t\t<div className=\"d-flex flex-row justify-content-center\">\n\t\t\t\t<div className=\"col-2\"></div>\n\t\t\t\t<div className=\"col-8\">\n\t\t\t\t\t<h3 className=\"AllInOneValidation\">\n\t\t\t\t\t\tAll validations in one file\n\t\t\t\t\t</h3>\n\t\t\t\t\t<Formik\n\t\t\t\t\t\tvalidationSchema={Schema}\n\t\t\t\t\t\tvalidate={validate}\n\t\t\t\t\t\tinitialValues={{\n\t\t\t\t\t\t\tuserName: '',\n\t\t\t\t\t\t\tpassword: '',\n\t\t\t\t\t\t\tpasswordConfirmation: '',\n\t\t\t\t\t\t\tphoneNumber: '',\n\t\t\t\t\t\t}}\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * Here we are using '' as initial value if you set undefined as initial\n\t\t\t\t\t\t * value it will show error `A component is changing an uncontrolled\n\t\t\t\t\t\t * input of type undefined to be controlled.`\n\t\t\t\t\t\t */\n\t\t\t\t\t\tonSubmit={values => {\n\t\t\t\t\t\t\tsleep(500).then(() => {\n\t\t\t\t\t\t\t\talert(JSON.stringify(values, null, 2));\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t{() => (\n\t\t\t\t\t\t\t<Form>\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<p className=\"text-info\">\n\t\t\t\t\t\t\t\t\t\tIf we type Tamilnadu or Germany it will\n\t\t\t\t\t\t\t\t\t\tshow username already taken error\n\t\t\t\t\t\t\t\t\t\tmessage\n\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t<label htmlFor=\"userName\">userName</label>\n\t\t\t\t\t\t\t\t\t<Field\n\t\t\t\t\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\t\t\t\t\tname=\"userName\"\n\t\t\t\t\t\t\t\t\t\tplaceholder=\"userName\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<ErrorMessage\n\t\t\t\t\t\t\t\t\t\tclassName=\"text-danger small\"\n\t\t\t\t\t\t\t\t\t\tcomponent=\"div\"\n\t\t\t\t\t\t\t\t\t\tname=\"userName\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<br />\n\n\t\t\t\t\t\t\t\t<label htmlFor=\"password\">password</label>\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<Field\n\t\t\t\t\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\t\t\t\t\tname=\"password\"\n\t\t\t\t\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\t\t\t\t\tplaceholder=\"password\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<ErrorMessage\n\t\t\t\t\t\t\t\t\t\tclassName=\"text-danger small\"\n\t\t\t\t\t\t\t\t\t\tcomponent=\"div\"\n\t\t\t\t\t\t\t\t\t\tname=\"password\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<label htmlFor=\"passwordConfirmation\">\n\t\t\t\t\t\t\t\t\t\tPassword Confirmation\n\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t<Field\n\t\t\t\t\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\t\t\t\t\tname=\"passwordConfirmation\"\n\t\t\t\t\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\t\t\t\t\tplaceholder=\"passwordConfirmation\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<ErrorMessage\n\t\t\t\t\t\t\t\t\t\tclassName=\"text-danger small\"\n\t\t\t\t\t\t\t\t\t\tcomponent=\"div\"\n\t\t\t\t\t\t\t\t\t\tname=\"passwordConfirmation\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<label htmlFor=\"phoneNumber\">\n\t\t\t\t\t\t\t\t\t\tPhone Number\n\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t<Field\n\t\t\t\t\t\t\t\t\t\tclassName=\"form-control\"\n\t\t\t\t\t\t\t\t\t\tname=\"phoneNumber\"\n\t\t\t\t\t\t\t\t\t\tplaceholder=\"phoneNumber\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<ErrorMessage\n\t\t\t\t\t\t\t\t\t\tclassName=\"text-danger small\"\n\t\t\t\t\t\t\t\t\t\tcomponent=\"div\"\n\t\t\t\t\t\t\t\t\t\tname=\"phoneNumber\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tclassName=\"btn btn-primary m-2\"\n\t\t\t\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tSubmit\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t<Debug />\n\t\t\t\t\t\t\t</Form>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</Formik>\n\t\t\t\t\t<Line />\n\t\t\t\t</div>\n\t\t\t\t<div className=\"col-2\"></div>\n\t\t\t</div>\n\t\t</div>\n\t</>\n);\n\nexport default AllInOneValidation;\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\n\nimport Arrays from './components/Arrays';\nimport AsyncValidation from './components/AsyncValidation';\n// import { AsyncSubmit } from './components/basic/';\nimport Checkbox from './components/Checkbox';\nimport CombinedValidations from './components/CombinedValidations';\nimport CustomInputs from './components/CustomInputs';\nimport ErrorMessage from './components/ErrorMessage';\nimport FastField from './components/FastField';\nimport FastFieldWebExample from './components/FastFieldWebExample';\nimport FieldLevelValidation from './components/FieldLevelValidation';\nimport MultistepWizard from './components/MultistepWizard';\nimport SchemaValidation from './components/SchemaValidation';\nimport SyncValidation from './components/SyncValidation';\nimport FormOne from './components/FormOne';\nimport FormTwo from './components/FormTwo';\nimport FormThree from './components/FormThree';\nimport AllInOneValidation from './components/AllInOneValidation';\n\nfunction ExampleValidations() {\n\treturn (\n\t\t<div className=\"container\">\n\t\t\t<div className=\"d-flex flex-row justify-content-center\">\n\t\t\t\t<div className=\"col-2\"></div>\n\t\t\t\t<div className=\"col-8\">\n\t\t\t\t\t<Arrays />\n\t\t\t\t\t<AsyncValidation />\n\t\t\t\t\t<Checkbox />\n\t\t\t\t\t<CombinedValidations />\n\t\t\t\t\t<CustomInputs />\n\t\t\t\t\t<ErrorMessage />\n\t\t\t\t\t<FastField />\n\t\t\t\t\t{/* <FastFieldWebExample /> */}\n\t\t\t\t\t<FieldLevelValidation />\n\t\t\t\t\t<MultistepWizard />\n\t\t\t\t\t<SchemaValidation />\n\t\t\t\t\t<SyncValidation />\n\t\t\t\t\t<FormOne email=\"hello\" />\n\t\t\t\t\t<FormTwo />\n\t\t\t\t\t<FormThree />\n\t\t\t\t</div>\n\t\t\t\t<div className=\"col-2\"></div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default function App() {\n\treturn (\n\t\t<Router>\n\t\t\t<div>\n\t\t\t\t<nav>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<Link to=\"/\">\n\t\t\t\t\t\t\t\tAll major validations in one form\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<Link to=\"/exampleValidations\">\n\t\t\t\t\t\t\t\tExample Validations\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t</ul>\n\t\t\t\t</nav>\n\n\t\t\t\t{/* A <Switch> looks through its children <Route>s and\n\t\t\t  renders the first one that matches the current URL. */}\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route path=\"/exampleValidations\">\n\t\t\t\t\t\t<ExampleValidations />\n\t\t\t\t\t</Route>\n\t\t\t\t\t<Route path=\"/\">\n\t\t\t\t\t\t<AllInOneValidation />\n\t\t\t\t\t</Route>\n\t\t\t\t</Switch>\n\t\t\t</div>\n\t\t</Router>\n\t);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}