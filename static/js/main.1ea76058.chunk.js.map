{"version":3,"sources":["components/Debug.js","components/CustomInputs.js","components/Arrays.js","App.js","serviceWorker.js","index.js"],"names":["Debug","style","margin","borderRadius","background","boxShadow","textTransform","fontSize","borderTopLeftRadius","borderTopRightRadius","fontWeight","padding","color","letterSpacing","validationSchema","validate","onSubmit","rest","overflowX","JSON","stringify","Fieldset","name","label","Fragment","className","htmlFor","id","component","initialValues","email","animal","website","Yup","shape","required","url","animalsList","value","Options","options","map","option","key","CustomInputs","values","setTimeout","alert","onSubmitHandle","render","isSubmitting","handleReset","type","placeholder","disabled","onClick","friends","FriendArrayErrors","errors","message","mapper","a","this","test","list","length","Set","size","of","min","unique","Arrays","touched","insert","remove","push","friend","index","Line","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1ea76058.chunk.js","sourcesContent":["import React from 'react';\nimport { FormikConsumer } from 'formik';\n\nexport const Debug = () => (\n  <div\n    style={{\n      margin: '3rem 0',\n      borderRadius: 4,\n      background: '#f6f8fa',\n\n      boxShadow: '0 0 1px  #eee inset',\n    }}\n  >\n    <div\n      style={{\n        textTransform: 'uppercase',\n        fontSize: 11,\n        borderTopLeftRadius: 4,\n        borderTopRightRadius: 4,\n        fontWeight: 500,\n        padding: '.5rem',\n        background: '#555',\n        color: '#fff',\n        letterSpacing: '1px',\n      }}\n    >\n      Formik State\n    </div>\n    <FormikConsumer>\n      {({ validationSchema, validate, onSubmit, ...rest }) => (\n        <pre\n          style={{\n            fontSize: '.65rem',\n            padding: '.25rem .5rem',\n            overflowX: 'scroll',\n          }}\n        >\n          {JSON.stringify(rest, null, 2)}\n        </pre>\n      )}\n    </FormikConsumer>\n  </div>\n);\n","// https://github.com/jaredpalmer/formik/blob/master/examples/CustomInputs.js\n\n// in this component Fieldset concept is used to group the Field label and errormessage\n\nimport React from 'react';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { Debug } from './Debug';\n\n// By combining a vanilla <label> plus Formik's <Field> and <ErrorMessage>,\n// we can abstract a generic \"Fieldset\" component for most of our inputs.\nconst Fieldset = ({ name, label, ...rest }) => (\n    <React.Fragment>\n        <div className=\"form-group\">\n            <label htmlFor={name}>{label}</label>\n            <Field id={name} name={name} {...rest} />\n            <ErrorMessage name={name} className='text-danger small' component='div' />\n        </div>\n    </React.Fragment>\n);\n\nconst initialValues = {\n    email: 'vigneshwaran@chandrasekaran.com',\n    color: 'red',\n    animal: '',\n    website: 'https://github.com/vigneshwaran-chandrasekaran',\n};\n\nconst validationSchema = Yup.object().shape({\n    email: Yup.string()\n        .email('Invalid email address')\n        .required('Required'),\n    color: Yup.string().required('Required'),\n    website: Yup.string()\n        .url('Invalid URL')\n        .required('Required'),\n    animal: Yup.string().required('Required'),\n});\n\nfunction onSubmitHandle(values) {\n    setTimeout(() => {\n        alert(JSON.stringify(values, null, 2));\n    }, 500);\n}\n\n// on component load list of values\n// we can get this details from api call also\nconst animalsList = [\n    {\n        id: 1,\n        value: 'Tiger'\n    }, {\n        id: 2,\n        value: 'Lion'\n    }, {\n        id: 3,\n        value: 'Dog'\n    }, {\n        id: 4,\n        value: 'Cat'\n    }\n];\n\n// generage select dropdown option list dynamically\nfunction Options({ options }) {\n    return (\n        options.map(option => <option key={option.id} value={option.value}>{option.value}</option>)\n    );\n}\n\nconst CustomInputs = () => (\n    <div className=\"container\">\n        <h1 className='text-center mb-3'>Grouping fields, dynamic select options</h1>\n        <div className='d-flex flex-row justify-content-center'>\n            <div className='col-2'></div>\n            <div className='col-8'>\n                <Formik\n                    initialValues={initialValues}\n                    validationSchema={validationSchema}\n                    onSubmit={values => onSubmitHandle(values)}\n                    render={({ isSubmitting, handleReset }) => (\n                        <Form>\n                            <Fieldset\n                                name=\"email\"\n                                type=\"email\"\n                                label=\"Email\"\n                                placeholder=\"jane@acme.com\"\n                                className=\"form-control\"\n                            />\n                            <Fieldset\n                                name=\"color\"\n                                className=\"form-control\"\n                                label=\"Favorite Color\"\n                                component=\"select\">\n                                <option value=\"\">Select a Color</option>\n                                <option value=\"red\">Red</option>\n                                <option value=\"green\">Green</option>\n                                <option value=\"blue\">Blue</option>\n                            </Fieldset>\n\n                            <Fieldset\n                                name=\"website\"\n                                type=\"url\"\n                                label=\"Website\"\n                                placeholder=\"https://example.com\"\n                                className=\"form-control\"\n                            />\n\n                            <Fieldset\n                                name=\"animal\"\n                                className=\"form-control\"\n                                component=\"select\"\n                                label=\"Favorite Animal\">\n                                <option value=\"\">Select an animal</option>\n                                <option value=\"tiger\">Tiger</option>\n                                <option value=\"bear\">Bear</option>\n                                <option value=\"shark\">Shark</option>\n                                <Options options={animalsList} />\n                            </Fieldset>\n\n                            <button\n                                type=\"reset\"\n                                className=\"btn btn-warning m-2\"\n                                disabled={isSubmitting}\n                                onClick={handleReset}>Reset</button>\n\n                            <button\n                                type=\"submit\"\n                                className=\"btn btn-primary m-2\">Submit</button>\n\n                            <Debug />\n                        </Form>\n                    )}\n                />\n            </div>\n            <div className='col-2'></div>\n        </div>\n    </div>\n);\n\nexport default CustomInputs;","// https://github.com/jaredpalmer/formik/blob/master/examples/Arrays.js\n\n// in this component we add dynamic fields when we click button and we can remove that field row also\n\nimport React from 'react';\nimport { Formik, Field, Form, ErrorMessage, FieldArray } from 'formik';\nimport * as Yup from 'yup';\nimport { Debug } from './Debug';\n\nconst initialValues = {\n    friends: [\n        {\n            name: '',\n            email: '',\n        },\n    ],\n};\n\n// within a `FieldArray`'s render\nconst FriendArrayErrors = ({ errors }) =>\n    typeof errors.friends === 'string' ? <div>{errors.friends}</div> : null;\n\n// https://github.com/jquense/yup/issues/345#issuecomment-487320558\n\n// custom method to check if array contains any duplicate email address\nYup.addMethod(Yup.array, 'unique', function (message, mapper = a => a) {\n    return this.test('unique', message, function (list) {\n        return list.length === new Set(list.map(mapper)).size;\n    });\n});\n\nconst validationSchema = Yup.object().shape({\n    friends: Yup.array()\n        .of(\n            Yup.object().shape({\n                name: Yup.string()\n                    .min(4, 'too short')\n                    .required('Name Required'), // these constraints take precedence\n                email: Yup.string()\n                    .email('Invalid email address')\n                    .required('Email Required'), // these constraints take precedence\n            })\n        )\n        .unique('duplicate email', a => a.email)\n        .required('Must have friends') // these constraints are shown if and only if inner constraints are satisfied\n        .min(3, 'Minimum of 3 friends'),\n});\n\nconst Arrays = () => (\n    <div>\n        <h1 className='text-center mb-3'>Dyanmic Field object</h1>\n        <div className=\"container\">\n            <div className='d-flex flex-row justify-content-center'>\n                <div className='col-2'></div>\n                <div className='col-8'>\n                    <Formik\n                        initialValues={initialValues}\n                        validationSchema={validationSchema}\n                        onSubmit={values => {\n                            setTimeout(() => {\n                                alert(JSON.stringify(values, null, 2));\n                            }, 500);\n                        }}\n                        render={({\n                            values,\n                            errors,\n                            touched,\n                            isSubmitting }) => (\n                                <Form>\n                                    <FieldArray\n                                        name=\"friends\"\n                                        render={({ insert, remove, push }) => (\n                                            <div>\n                                                {values.friends.length > 0 &&\n                                                    values.friends.map((friend, index) => (\n                                                        <div className=\"d-flex align-items-center\" key={index}>\n                                                            <div className=\"col\">\n                                                                <label htmlFor={`friends.${index}.name`}>Name</label>\n                                                                <Field\n                                                                    name={`friends.${index}.name`}\n                                                                    placeholder=\"Jane Doe\"\n                                                                    type=\"text\"\n                                                                    className=\"form-control\"\n                                                                />\n                                                                <ErrorMessage\n                                                                    name={`friends.${index}.name`}\n                                                                    component=\"div\"\n                                                                    className='text-danger small'\n                                                                />\n                                                            </div>\n                                                            <div className=\"col\">\n                                                                <label htmlFor={`friends.${index}.email`}>Email</label>\n                                                                <Field\n                                                                    name={`friends.${index}.email`}\n                                                                    placeholder=\"jane@acme.com\"\n                                                                    type=\"email\"\n                                                                    className=\"form-control\"\n                                                                />\n                                                                <ErrorMessage\n                                                                    name={`friends.${index}.email`}\n                                                                    component=\"div\"\n                                                                    className='text-danger small'\n                                                                />\n                                                            </div>\n                                                            <div className=\"col\">\n                                                                <button\n                                                                    type=\"button\"\n                                                                    className=\"btn btn-danger\"\n                                                                    onClick={() => {\n                                                                        if (values.friends.length > 1) {\n                                                                            return remove(index)\n                                                                        }\n                                                                    }}\n                                                                >X</button>\n                                                            </div>\n                                                        </div>\n                                                    ))}\n                                                <button\n                                                    type=\"button\"\n                                                    className=\"btn btn-warning btn-sm mt-2\"\n                                                    onClick={() => push({ name: '', email: '' })}\n                                                >Add Friend</button>\n                                            </div>\n                                        )}\n                                    />\n                                    <button type=\"submit\" className=\"btn btn-primary mt-2\">Invite</button>\n                                    <FriendArrayErrors errors={errors} />\n                                    {/* <p>{JSON.stringify(errors, null, 2)}</p>\n                                    <p>{JSON.stringify(values, null, 2)}</p> */}\n                                    <Debug />\n                                </Form>\n                            )}\n                    />\n                </div>\n                <div className='col-2'></div>\n            </div>\n        </div>\n    </div>\n);\n\nexport default Arrays;","import React from 'react';\n// import FormOne from './components/FormOne';\n// import FormTwo from './components/FormTwo';\n// import FormThree from './components/FormThree';\nimport CustomInputs from './components/CustomInputs';\nimport Arrays from './components/Arrays';\n\nfunction Line() {\n  return (<hr />);\n}\n\nexport default function App() {\n  return (\n    <div>\n      {/* <FormOne email='hello' />\n      <Line />\n      <FormTwo />\n      <Line /> */}\n      {/* <FormThree /> */}\n      <CustomInputs />\n      <Line />\n      <Arrays />\n      <Line />\n    </div>\n  )\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}