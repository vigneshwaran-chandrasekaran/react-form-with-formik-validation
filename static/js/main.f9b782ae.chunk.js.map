{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["FormikApp","withFormik","mapPropsToValues","email","password","newsletter","plan","validationSchema","Yup","shape","required","min","handleSubmit","values","console","log","errors","touched","className","htmlFor","type","id","name","checked","component","value","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gUAyFeA,EAtBGC,YAAW,CAC3BC,iBAD2B,YAGzB,MAAO,CACLC,MAHoD,EAArCA,OAGC,eAChBC,SAJoD,EAA9BA,UAIA,GACtBC,WALoD,EAApBA,aAKN,EAC1BC,KANoD,EAARA,MAM9B,MAGlBC,iBAAkBC,WAAaC,MAAM,CAGnCN,MAAOK,WAAaL,MAAM,4BAA4BO,WACtDN,SAAUI,WAAaG,IAAI,GAAGD,WAC9BJ,KAAME,WAAaE,aAErBE,aAjB2B,SAiBdC,GACXC,QAAQC,IAAI,CAAEF,aAlBAZ,EA9DN,SAAC,GAIN,IAHLY,EAGI,EAHJA,OACAG,EAEI,EAFJA,OACAC,EACI,EADJA,QAEA,OACE,yBAAKC,UAAU,aACb,yBAAKA,UAAU,0CACb,yBAAKA,UAAU,UACf,yBAAKA,UAAU,SACb,kBAAC,IAAD,KACE,yBAAKA,UAAU,cACb,2BAAOC,QAAQ,SAAf,kBACA,kBAAC,IAAD,CACEC,KAAK,QACLF,UAAU,eACVG,GAAG,QACHC,KAAK,UAENL,EAAQd,OAASa,EAAOb,OAAS,yBAAKe,UAAU,0BAA0BF,EAAOb,QAEpF,yBAAKe,UAAU,cACb,2BAAOC,QAAQ,OAAf,aACA,kBAAC,IAAD,CACEC,KAAK,WACLF,UAAU,eACVG,GAAG,MACHC,KAAK,aAENL,EAAQb,UAAYY,EAAOZ,UAAY,yBAAKc,UAAU,0BAA0BF,EAAOZ,WAE1F,yBAAKc,UAAU,yBACb,2BAAOA,UAAU,oBACf,kBAAC,IAAD,CACEA,UAAU,mBACVE,KAAK,WACLE,KAAK,aACLC,QAASV,EAAOR,aAElB,4DAGJ,yBAAKa,UAAU,cACb,2BAAOC,QAAQ,QAAf,gBACA,kBAAC,IAAD,CAAOK,UAAU,SAASF,KAAK,OAAOJ,UAAU,eAAeG,GAAG,QAChE,4BAAQI,MAAM,IAAd,oBACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,OAGHR,EAAQX,MAAQU,EAAOV,MAAQ,yBAAKY,UAAU,0BAA0BF,EAAOV,MAChF,4BAAQc,KAAK,SAASF,UAAU,mBAAhC,YAGJ,yBAAKA,UAAU,eCjDHQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,CAAK7B,MAAM,UAAY8B,SAASC,eAAe,SD2HzD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f9b782ae.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { withFormik, Form, Field } from 'formik';\nimport * as Yup from 'yup';\n\nconst App = ({\n  values,\n  errors,\n  touched\n}) => {\n  return (\n    <div className=\"container\">\n      <div className='d-flex flex-row justify-content-center'>\n        <div className='col-2'></div>\n        <div className='col-6'>\n          <Form>\n            <div className=\"form-group\">\n              <label htmlFor=\"email\">Email address:</label>\n              <Field\n                type=\"email\"\n                className=\"form-control\"\n                id=\"email\"\n                name=\"email\"\n              />\n              {touched.email && errors.email && <div className='text-danger small my-2'>{errors.email}</div>}\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"pwd\">Password:</label>\n              <Field\n                type=\"password\"\n                className=\"form-control\"\n                id=\"pwd\"\n                name=\"password\"\n              />\n              {touched.password && errors.password && <div className='text-danger small my-2'>{errors.password}</div>}\n            </div>\n            <div className=\"form-group form-check\">\n              <label className=\"form-check-label\">\n                <Field\n                  className=\"form-check-input\"\n                  type=\"checkbox\"\n                  name=\"newsletter\"\n                  checked={values.newsletter}\n                />\n                <span> I agree your condition.</span>\n              </label>\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"sel1\">Select list:</label>\n              <Field component=\"select\" name=\"plan\" className=\"form-control\" id=\"sel1\">\n                <option value=''>Select your plan</option>\n                <option value='1'>1</option>\n                <option value='2'>2</option>\n                <option value='3'>3</option>\n                <option value='4'>4</option>\n              </Field>\n            </div>\n            {touched.plan && errors.plan && <div className='text-danger small my-2'>{errors.plan}</div>}\n            <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\n          </Form>\n        </div>\n        <div className='col-2'></div>\n      </div>\n    </div>\n  );\n}\n\nconst FormikApp = withFormik({\n  mapPropsToValues({ email, password, newsletter, plan }) {\n    // if we pass props to component means we can get it in mapPropsToValues(props)\n    return {\n      email: email || 'vigneshwaran',\n      password: password || '',\n      newsletter: newsletter || false,\n      plan: plan || '2',\n    }\n  },\n  validationSchema: Yup.object().shape({\n    // we have added custom error messgae for email validation\n    // default email validation error message is : `email must be a valid email`\n    email: Yup.string().email('Please enter valid email').required(),\n    password: Yup.string().min(5).required(),\n    plan: Yup.string().required()\n  }),\n  handleSubmit(values) {\n    console.log({ values });\n  }\n})(App);\n\nexport default FormikApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App email='hello' />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}