{"version":3,"sources":["components/Error.js","components/FormTwo.js","serviceWorker.js","index.js","App.js"],"names":["Error","touched","message","className","role","aria-label","validationSchema","Yup","shape","userName","min","max","required","email","country","initialValues","FormTwo","useState","setCountry","suggestions","setSuggestions","onSuggestionsClearRequested","console","log","onSubmit","values","setSubmitting","resetForm","setTimeout","alert","JSON","stringify","errors","handleChange","handleBlur","handleSubmit","isSubmitting","setFieldValue","htmlFor","type","id","name","placeholder","value","onBlur","onChange","inputProps","autoComplete","_event","newValue","onSuggestionsFetchRequested","a","axios","get","result","data","map","row","flag","getSuggestionValue","suggestion","renderSuggestion","style","width","paddingRight","src","alt","onSuggestionSelected","event","suggestionValue","suggestionIndex","sectionIndex","method","preventDefault","disabled","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e11d1527.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function Error({ touched, message }) {\n    if (!touched) {\n        return <div>&nbsp;</div>;\n    }\n    if (message) {\n        return <div className='text-danger'>{message} <span role=\"img\" aria-label='Emoji'>ðŸ˜Ÿ</span></div>;\n    }\n    return <div className='text-success'>all good <span role=\"img\" aria-label='Emoji'>ðŸ˜ƒ</span></div>;\n}\n","import React, { useState } from 'react';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport Autosuggest from 'react-autosuggest';\nimport axios from 'axios';\nimport Error from './Error';\n// import '../styles/autosuggest.css';\n\n\nconst validationSchema = Yup.object().shape({\n    userName: Yup.string()\n        .min(1)\n        .max(15)\n        .required(),\n    email: Yup.string()\n        .email()\n        .min(1)\n        .max(15)\n        .required(),\n    country: Yup.string()\n        .required()\n});\n\n// initial state (starting field values)\nconst initialValues = {\n    email: 'one@g.coms',\n    userName: 'two',\n    country: ''\n};\n\n\nexport default function FormTwo() {\n    const [country, setCountry] = useState('');\n    const [suggestions, setSuggestions] = useState([]);\n\n\n\n    function onSuggestionsClearRequested() {\n        console.log('hi');\n        setSuggestions([]);\n    }\n\n\n    return (\n        <div className=\"container\">\n            <div className='d-flex flex-row justify-content-center'>\n                <div className='col-2'></div>\n                <div className='col-6'>\n                    <Formik\n                        initialValues={initialValues}\n                        validationSchema={validationSchema}\n                        onSubmit={(values, { setSubmitting, resetForm }) => {\n                            console.log({ values });\n                            setSubmitting(true);\n                            setTimeout(() => {\n                                alert(JSON.stringify(values, null, 2));\n                                resetForm();\n                                setSubmitting(false);\n                            }, 500);\n                        }}\n                    >\n                        {({\n                            values,\n                            errors,\n                            touched,\n                            handleChange,\n                            handleBlur,\n                            handleSubmit,\n                            isSubmitting,\n                            setFieldValue\n                        }) => (\n                                <form onSubmit={handleSubmit}>\n                                    <div className=\"form-group\">\n                                        <label htmlFor=\"email\">Email address:</label>\n                                        <input\n                                            type=\"email\"\n                                            className={\"form-control \" + (touched.email && errors.email ? 'border-danger' : '')}\n                                            id=\"email\"\n                                            name=\"email\"\n                                            placeholder='Enter your email'\n                                            value={values.email}\n                                            onBlur={handleBlur}\n                                            onChange={handleChange}\n                                        />\n                                        <Error touched={touched.email} message={errors.email} />\n                                    </div>\n                                    <div className=\"form-group\">\n                                        <label htmlFor='userName'>Name</label>\n                                        <input\n                                            type='text'\n                                            className={\"form-control \" + (touched.userName && errors.userName ? 'border-danger' : '')}\n                                            id='userName'\n                                            name='userName'\n                                            placeholder='Enter your name'\n                                            value={values.userName}\n                                            onBlur={handleBlur}\n                                            onChange={handleChange}\n                                        />\n                                        <Error touched={touched.userName} message={errors.userName} />\n                                    </div>\n\n                                    <div className=\"form-group\">\n                                        <label htmlFor='autosuggest'>Autosuggest</label>\n                                        <Autosuggest\n                                            inputProps={{\n                                                value: country,          // usually comes from the application state\n                                                // onBlur,         // called when the input loses focus, e.g. when user presses Tab\n                                                type: 'search',\n                                                placeholder: 'Enter city or postcode',\n                                                className: \"form-control \" + (touched.country && errors.country ? 'border-danger' : ''),\n                                                autoComplete: 'hello',\n                                                name: 'autosuggest',\n                                                id: 'autosuggest',\n                                                onChange: (_event, { newValue }) => {\n                                                    // called every time the input value changes\n                                                    console.log({ newValue });\n                                                    setCountry(newValue);\n                                                    console.log(country);\n                                                }\n                                            }}\n                                            suggestions={suggestions}\n                                            onSuggestionsFetchRequested={async ({ value }) => {\n                                                console.log({ value });\n                                                if (!value) {\n                                                    setSuggestions([]);\n                                                    return;\n                                                }\n\n                                                try {\n                                                    const result = await axios.get(`https://restcountries.eu/rest/v2/name/${value}`);\n                                                    console.log(result.data);\n                                                    setSuggestions(result.data.map(row => ({\n                                                        name: row.name,\n                                                        flag: row.flag\n                                                    })));\n                                                } catch (error) {\n                                                    setSuggestions([]);\n                                                }\n                                            }}\n                                            onSuggestionsClearRequested={onSuggestionsClearRequested}\n                                            getSuggestionValue={(suggestion) => {\n                                                return suggestion.name;\n                                            }}\n                                            renderSuggestion={(suggestion) => {\n                                                return <div>\n                                                    <img\n                                                        style={{ width: '25px', paddingRight: '10px' }}\n                                                        src={suggestion.flag}\n                                                        alt={suggestion.name} />\n                                                    {suggestion.name}\n                                                </div>;\n                                            }}\n                                            onSuggestionSelected={(event,\n                                                { suggestion, suggestionValue, suggestionIndex, sectionIndex, method }) => {\n                                                if (method === 'enter') {\n                                                    event.preventDefault();\n                                                }\n                                                setCountry(suggestion.name);\n                                                setFieldValue('country', suggestion.name);\n                                            }}\n                                        />\n                                        <Error touched={touched.country} message={errors.country} />\n\n                                    </div>\n                                    <div>\n                                        <button\n                                            disabled={isSubmitting}\n                                            type=\"submit\"\n                                            className=\"btn btn-primary\">\n                                            Submit\n                                        </button>\n                                    </div>\n                                    {JSON.stringify(values)}\n                                </form>\n                            )}\n                    </Formik>\n                </div>\n                <div className='col-2'></div>\n            </div>\n        </div>\n    )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\n// import FormOne from './components/FormOne';\nimport FormTwo from './components/FormTwo';\n\nexport default function App() {\n  return (\n    <div>\n      {/* <FormOne email='hello' /> */}\n      <FormTwo />\n    </div>\n  )\n}"],"sourceRoot":""}